// A Bison parser, made by GNU Bison 3.5.1.

// Skeleton interface for Bison LALR(1) parsers in C++

// Copyright (C) 2002-2015, 2018-2020 Free Software Foundation, Inc.

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// As a special exception, you may create a larger work that contains
// part or all of the Bison parser skeleton and distribute that work
// under terms of your choice, so long as that work isn't itself a
// parser generator using the skeleton or a modified version thereof
// as a parser skeleton.  Alternatively, if you modify or redistribute
// the parser skeleton itself, you may (at your option) remove this
// special exception, which will cause the skeleton and the resulting
// Bison output files to be licensed under the GNU General Public
// License without this special exception.

// This special exception was added by the Free Software Foundation in
// version 2.2 of Bison.


/**
 ** \file p4parser.tab.hpp
 ** Define the P4::parser class.
 */

// C++ LALR(1) parser skeleton written by Akim Demaille.

// Undocumented macros, especially those whose name start with YY_,
// are private implementation details.  Do not rely on them.

#ifndef YY_YY_P4PARSER_TAB_HPP_INCLUDED
# define YY_YY_P4PARSER_TAB_HPP_INCLUDED
// "%code requires" blocks.
#line 39 "p4parser.ypp"

#include <cassert>   // NOLINT(build/include_order)
#include <iostream>  // NOLINT(build/include_order)

#include "frontends/common/constantParsing.h"
#include "frontends/common/options.h"
#include "ir/ir.h"
#include "lib/cstring.h"
#include "lib/source_file.h"

// Ignore a warning caused by autogenerated code.
// The #if pragma is a little awkward because some preprocessors do not like ||
#if defined(__has_warning)
#if __has_warning("-Wunused-but-set-variable")
#pragma GCC diagnostic ignored "-Wunused-but-set-variable"
#endif
#else
#pragma GCC diagnostic ignored "-Wunused-but-set-variable"
#endif

namespace P4 {
class AbstractP4Lexer;
class P4ParserDriver;

// This is a workaround for an UndefinedBehaviorSanitizer issue triggered by
// Bison's variant implementation. When variant::move() is used to move a value
// from an initialized instance of variant to an uninitialized instance, it uses
// placement new to initialize the uninitialized instance, then calls
// variant::swap(), then destroys the moved-from instance. The problem is that
// placement new does not perform any initialization for primitive types, and
// for bool or enum types that can result in a value that isn't a valid element
// of those types, which UndefinedBehaviorSanitizer doesn't like.
struct OptionalConst {
    OptionalConst() = default;
    explicit OptionalConst(bool isConst) : isConst(isConst) { }
    bool isConst = false;
};
}  // namespace P4

inline std::ostream& operator<<(std::ostream& out, const P4::OptionalConst& oc) {
    out << "OptionalConst(" << oc.isConst << ')';
    return out;
}

// Bison uses the types you provide to %type to make constructors for the
// variant type it uses under the hood, but its code generation is a little
// naive and it always prepends 'const' to the type. This is problematic when
// the symbol type we want is itself const, since duplicate const qualifiers are
// forbidden in C++. We avoid the problem using a typedef.
typedef const IR::Type ConstType;

#ifndef YYDEBUG
#define YYDEBUG 1
#endif

#define YY_NULLPTR nullptr

namespace P4 {
class Token {
 public:
    int type;
    cstring text;
    UnparsedConstant* unparsedConstant;

    Token() : Token(0, "", nullptr) { }
    Token(int type, cstring text) : Token(type, text, nullptr) { }
    Token(int type, UnparsedConstant unparsedConstant)
            : Token(type, unparsedConstant.text,
                    new UnparsedConstant(unparsedConstant)) { }

 private:
    Token(int type, cstring text, UnparsedConstant* unparsedConstant)
            : type(type), text(text), unparsedConstant(unparsedConstant) { }
};

} // namespace P4

inline std::ostream& operator<<(std::ostream& out, const P4::Token& t) {
    out << t.text;
    return out;
}

#line 131 "p4parser.tab.hpp"

# include <cassert>
# include <cstdlib> // std::abort
# include <iostream>
# include <stdexcept>
# include <string>
# include <vector>

#if defined __cplusplus
# define YY_CPLUSPLUS __cplusplus
#else
# define YY_CPLUSPLUS 199711L
#endif

// Support move semantics when possible.
#if 201103L <= YY_CPLUSPLUS
# define YY_MOVE           std::move
# define YY_MOVE_OR_COPY   move
# define YY_MOVE_REF(Type) Type&&
# define YY_RVREF(Type)    Type&&
# define YY_COPY(Type)     Type
#else
# define YY_MOVE
# define YY_MOVE_OR_COPY   copy
# define YY_MOVE_REF(Type) Type&
# define YY_RVREF(Type)    const Type&
# define YY_COPY(Type)     const Type&
#endif

// Support noexcept when possible.
#if 201103L <= YY_CPLUSPLUS
# define YY_NOEXCEPT noexcept
# define YY_NOTHROW
#else
# define YY_NOEXCEPT
# define YY_NOTHROW throw ()
#endif

// Support constexpr when possible.
#if 201703 <= YY_CPLUSPLUS
# define YY_CONSTEXPR constexpr
#else
# define YY_CONSTEXPR
#endif

#include <typeinfo>
#ifndef YY_ASSERT
# include <cassert>
# define YY_ASSERT assert
#endif


#ifndef YY_ATTRIBUTE_PURE
# if defined __GNUC__ && 2 < __GNUC__ + (96 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_PURE __attribute__ ((__pure__))
# else
#  define YY_ATTRIBUTE_PURE
# endif
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# if defined __GNUC__ && 2 < __GNUC__ + (7 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_UNUSED __attribute__ ((__unused__))
# else
#  define YY_ATTRIBUTE_UNUSED
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(E) ((void) (E))
#else
# define YYUSE(E) /* empty */
#endif

#if defined __GNUC__ && ! defined __ICC && 407 <= __GNUC__ * 100 + __GNUC_MINOR__
/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                            \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")              \
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# define YY_IGNORE_MAYBE_UNINITIALIZED_END      \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif

#if defined __cplusplus && defined __GNUC__ && ! defined __ICC && 6 <= __GNUC__
# define YY_IGNORE_USELESS_CAST_BEGIN                          \
    _Pragma ("GCC diagnostic push")                            \
    _Pragma ("GCC diagnostic ignored \"-Wuseless-cast\"")
# define YY_IGNORE_USELESS_CAST_END            \
    _Pragma ("GCC diagnostic pop")
#endif
#ifndef YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_END
#endif

# ifndef YY_CAST
#  ifdef __cplusplus
#   define YY_CAST(Type, Val) static_cast<Type> (Val)
#   define YY_REINTERPRET_CAST(Type, Val) reinterpret_cast<Type> (Val)
#  else
#   define YY_CAST(Type, Val) ((Type) (Val))
#   define YY_REINTERPRET_CAST(Type, Val) ((Type) (Val))
#  endif
# endif
# ifndef YY_NULLPTR
#  if defined __cplusplus
#   if 201103L <= __cplusplus
#    define YY_NULLPTR nullptr
#   else
#    define YY_NULLPTR 0
#   endif
#  else
#   define YY_NULLPTR ((void*)0)
#  endif
# endif

/* Debug traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif

#line 23 "p4parser.ypp"
namespace P4 {
#line 266 "p4parser.tab.hpp"




  /// A Bison parser.
  class P4Parser
  {
  public:
#ifndef YYSTYPE
  /// A buffer to store and retrieve objects.
  ///
  /// Sort of a variant, but does not keep track of the nature
  /// of the stored data, since that knowledge is available
  /// via the current parser state.
  class semantic_type
  {
  public:
    /// Type of *this.
    typedef semantic_type self_type;

    /// Empty construction.
    semantic_type () YY_NOEXCEPT
      : yybuffer_ ()
      , yytypeid_ (YY_NULLPTR)
    {}

    /// Construct and fill.
    template <typename T>
    semantic_type (YY_RVREF (T) t)
      : yytypeid_ (&typeid (T))
    {
      YY_ASSERT (sizeof (T) <= size);
      new (yyas_<T> ()) T (YY_MOVE (t));
    }

    /// Destruction, allowed only if empty.
    ~semantic_type () YY_NOEXCEPT
    {
      YY_ASSERT (!yytypeid_);
    }

# if 201103L <= YY_CPLUSPLUS
    /// Instantiate a \a T in here from \a t.
    template <typename T, typename... U>
    T&
    emplace (U&&... u)
    {
      YY_ASSERT (!yytypeid_);
      YY_ASSERT (sizeof (T) <= size);
      yytypeid_ = & typeid (T);
      return *new (yyas_<T> ()) T (std::forward <U>(u)...);
    }
# else
    /// Instantiate an empty \a T in here.
    template <typename T>
    T&
    emplace ()
    {
      YY_ASSERT (!yytypeid_);
      YY_ASSERT (sizeof (T) <= size);
      yytypeid_ = & typeid (T);
      return *new (yyas_<T> ()) T ();
    }

    /// Instantiate a \a T in here from \a t.
    template <typename T>
    T&
    emplace (const T& t)
    {
      YY_ASSERT (!yytypeid_);
      YY_ASSERT (sizeof (T) <= size);
      yytypeid_ = & typeid (T);
      return *new (yyas_<T> ()) T (t);
    }
# endif

    /// Instantiate an empty \a T in here.
    /// Obsolete, use emplace.
    template <typename T>
    T&
    build ()
    {
      return emplace<T> ();
    }

    /// Instantiate a \a T in here from \a t.
    /// Obsolete, use emplace.
    template <typename T>
    T&
    build (const T& t)
    {
      return emplace<T> (t);
    }

    /// Accessor to a built \a T.
    template <typename T>
    T&
    as () YY_NOEXCEPT
    {
      YY_ASSERT (yytypeid_);
      YY_ASSERT (*yytypeid_ == typeid (T));
      YY_ASSERT (sizeof (T) <= size);
      return *yyas_<T> ();
    }

    /// Const accessor to a built \a T (for %printer).
    template <typename T>
    const T&
    as () const YY_NOEXCEPT
    {
      YY_ASSERT (yytypeid_);
      YY_ASSERT (*yytypeid_ == typeid (T));
      YY_ASSERT (sizeof (T) <= size);
      return *yyas_<T> ();
    }

    /// Swap the content with \a that, of same type.
    ///
    /// Both variants must be built beforehand, because swapping the actual
    /// data requires reading it (with as()), and this is not possible on
    /// unconstructed variants: it would require some dynamic testing, which
    /// should not be the variant's responsibility.
    /// Swapping between built and (possibly) non-built is done with
    /// self_type::move ().
    template <typename T>
    void
    swap (self_type& that) YY_NOEXCEPT
    {
      YY_ASSERT (yytypeid_);
      YY_ASSERT (*yytypeid_ == *that.yytypeid_);
      std::swap (as<T> (), that.as<T> ());
    }

    /// Move the content of \a that to this.
    ///
    /// Destroys \a that.
    template <typename T>
    void
    move (self_type& that)
    {
# if 201103L <= YY_CPLUSPLUS
      emplace<T> (std::move (that.as<T> ()));
# else
      emplace<T> ();
      swap<T> (that);
# endif
      that.destroy<T> ();
    }

# if 201103L <= YY_CPLUSPLUS
    /// Move the content of \a that to this.
    template <typename T>
    void
    move (self_type&& that)
    {
      emplace<T> (std::move (that.as<T> ()));
      that.destroy<T> ();
    }
#endif

    /// Copy the content of \a that to this.
    template <typename T>
    void
    copy (const self_type& that)
    {
      emplace<T> (that.as<T> ());
    }

    /// Destroy the stored \a T.
    template <typename T>
    void
    destroy ()
    {
      as<T> ().~T ();
      yytypeid_ = YY_NULLPTR;
    }

  private:
    /// Prohibit blind copies.
    self_type& operator= (const self_type&);
    semantic_type (const self_type&);

    /// Accessor to raw memory as \a T.
    template <typename T>
    T*
    yyas_ () YY_NOEXCEPT
    {
      void *yyp = yybuffer_.yyraw;
      return static_cast<T*> (yyp);
     }

    /// Const accessor to raw memory as \a T.
    template <typename T>
    const T*
    yyas_ () const YY_NOEXCEPT
    {
      const void *yyp = yybuffer_.yyraw;
      return static_cast<const T*> (yyp);
     }

    /// An auxiliary type to compute the largest semantic type.
    union union_type
    {
      // typeRef
      // namedType
      // p4listType
      // tupleType
      // headerStackType
      // specializedType
      // baseType
      // typeOrVoid
      // typeArg
      // realTypeArg
      char dummy1[sizeof (ConstType*)];

      // annotation
      char dummy2[sizeof (IR::Annotation*)];

      // optAnnotations
      char dummy3[sizeof (IR::Annotations*)];

      // argument
      char dummy4[sizeof (IR::Argument*)];

      // objInitializer
      // parserBlockStatement
      // controlBody
      // blockStatement
      char dummy5[sizeof (IR::BlockStatement*)];

      // instantiation
      // objDeclaration
      // parserLocalElement
      // valueSetDeclaration
      // controlLocalDeclaration
      // tableDeclaration
      // actionDeclaration
      // registerActionDeclaration
      // variableDeclaration
      // registerDeclaration
      // constantDeclaration
      // functionDeclaration
      char dummy6[sizeof (IR::Declaration*)];

      // direction
      char dummy7[sizeof (IR::Direction)];

      // entry
      char dummy8[sizeof (IR::Entry*)];

      // p4rtControllerType
      // transitionStatement
      // stateExpression
      // selectExpression
      // keysetExpression
      // reducedSimpleKeysetExpression
      // simpleKeysetExpression
      // switchLabel
      // actionRef
      // entryPriority
      // optInitializer
      // initializer
      // lvalue
      // expression
      // nonBraceExpression
      // intOrStr
      char dummy9[sizeof (IR::Expression*)];

      // nonTypeName
      // name
      // nonTableKwName
      // dot_name
      char dummy10[sizeof (IR::ID*)];

      // actionList
      char dummy11[sizeof (IR::IndexedVector<IR::ActionListElement>*)];

      // parserLocalElements
      // controlLocalDeclarations
      char dummy12[sizeof (IR::IndexedVector<IR::Declaration>*)];

      // identifierList
      char dummy13[sizeof (IR::IndexedVector<IR::Declaration_ID>*)];

      // kvList
      char dummy14[sizeof (IR::IndexedVector<IR::NamedExpression>*)];

      // parameterList
      // nonEmptyParameterList
      // optConstructorParameters
      char dummy15[sizeof (IR::IndexedVector<IR::Parameter>*)];

      // parserStates
      char dummy16[sizeof (IR::IndexedVector<IR::ParserState>*)];

      // tablePropertyList
      char dummy17[sizeof (IR::IndexedVector<IR::Property>*)];

      // specifiedIdentifierList
      char dummy18[sizeof (IR::IndexedVector<IR::SerEnumMember>*)];

      // objDeclarations
      // parserStatements
      // statOrDeclList
      char dummy19[sizeof (IR::IndexedVector<IR::StatOrDecl>*)];

      // structFieldList
      char dummy20[sizeof (IR::IndexedVector<IR::StructField>*)];

      // typeParameterList
      char dummy21[sizeof (IR::IndexedVector<IR::Type_Var>*)];

      // keyElement
      char dummy22[sizeof (IR::KeyElement*)];

      // functionPrototype
      // methodPrototype
      char dummy23[sizeof (IR::Method*)];

      // kvPair
      char dummy24[sizeof (IR::NamedExpression*)];

      // fragment
      // declaration
      // externDeclaration
      // matchKindDeclaration
      char dummy25[sizeof (IR::Node*)];

      // parameter
      char dummy26[sizeof (IR::Parameter*)];

      // parserState
      char dummy27[sizeof (IR::ParserState*)];

      // prefixedType
      // prefixedNonTypeName
      char dummy28[sizeof (IR::Path*)];

      // tableProperty
      char dummy29[sizeof (IR::Property*)];

      // selectCase
      char dummy30[sizeof (IR::SelectCase*)];

      // specifiedIdentifier
      char dummy31[sizeof (IR::SerEnumMember*)];

      // parserStatement
      // statementOrDeclaration
      char dummy32[sizeof (IR::StatOrDecl*)];

      // assignmentOrMethodCallStatement
      // emptyStatement
      // exitStatement
      // returnStatement
      // conditionalStatement
      // whileStatement
      // forStatement
      // forInitializer
      // directApplication
      // statement
      // switchStatement
      char dummy33[sizeof (IR::Statement*)];

      // structField
      char dummy34[sizeof (IR::StructField*)];

      // switchCase
      char dummy35[sizeof (IR::SwitchCase*)];

      // optTypeParameters
      // typeParameters
      char dummy36[sizeof (IR::TypeParameters*)];

      // controlTypeDeclaration
      char dummy37[sizeof (IR::Type_Control*)];

      // packageTypeDeclaration
      // parserDeclaration
      // controlDeclaration
      // typeDeclaration
      // derivedTypeDeclaration
      // headerTypeDeclaration
      // structTypeDeclaration
      // headerUnionDeclaration
      // enumDeclaration
      // typedefDeclaration
      char dummy38[sizeof (IR::Type_Declaration*)];

      // errorDeclaration
      char dummy39[sizeof (IR::Type_Error*)];

      // typeName
      char dummy40[sizeof (IR::Type_Name*)];

      // parserTypeDeclaration
      char dummy41[sizeof (IR::Type_Parser*)];

      // annotations
      char dummy42[sizeof (IR::Vector<IR::Annotation>*)];

      // annotationBody
      char dummy43[sizeof (IR::Vector<IR::AnnotationToken>*)];

      // argumentList
      // nonEmptyArgList
      char dummy44[sizeof (IR::Vector<IR::Argument>*)];

      // entriesList
      char dummy45[sizeof (IR::Vector<IR::Entry>*)];

      // tupleKeysetExpression
      // simpleExpressionList
      // expressionList
      // intList
      // intOrStrList
      // strList
      char dummy46[sizeof (IR::Vector<IR::Expression>*)];

      // keyElementList
      char dummy47[sizeof (IR::Vector<IR::KeyElement>*)];

      // methodPrototypes
      char dummy48[sizeof (IR::Vector<IR::Method>*)];

      // selectCaseList
      char dummy49[sizeof (IR::Vector<IR::SelectCase>*)];

      // switchCases
      char dummy50[sizeof (IR::Vector<IR::SwitchCase>*)];

      // typeArgumentList
      // realTypeArgumentList
      char dummy51[sizeof (IR::Vector<IR::Type>*)];

      // optCONST
      char dummy52[sizeof (OptionalConst)];

      // UNEXPECTED_TOKEN
      // END_PRAGMA
      // "<="
      // ">="
      // "<<"
      // "&&"
      // "||"
      // "!="
      // "=="
      // "+"
      // "-"
      // "|+|"
      // "|-|"
      // "*"
      // "{#}"
      // "/"
      // "%"
      // "|"
      // "&"
      // "^"
      // "~"
      // "["
      // "]"
      // "{"
      // "}"
      // "<"
      // L_ANGLE_ARGS
      // ">"
      // R_ANGLE_SHIFT
      // "("
      // ")"
      // "!"
      // ":"
      // ","
      // "?"
      // "."
      // "="
      // ";"
      // "@"
      // "++"
      // "_"
      // "&&&"
      // "..."
      // ".."
      // TRUE
      // FALSE
      // THIS
      // ABSTRACT
      // ACTION
      // ACTIONS
      // APPLY
      // BOOL
      // BIT
      // CONST
      // CONTROL
      // DEFAULT
      // ELSE
      // ENTRIES
      // ENUM
      // ERROR
      // EXIT
      // EXTERN
      // FOR
      // HEADER
      // HEADER_UNION
      // IF
      // IN
      // INOUT
      // INT
      // KEY
      // LIST
      // SELECT
      // MATCH_KIND
      // TYPE
      // OUT
      // PACKAGE
      // PARSER
      // PRAGMA
      // PRIORITY
      // RETURN
      // REGISTER
      // REGACTION
      // STATE
      // STRING
      // STRUCT
      // SWITCH
      // TABLE
      // TRANSITION
      // TUPLE
      // TYPEDEF
      // VARBIT
      // VALUESET
      // VOID
      // WHILE
      // annotationToken
      char dummy53[sizeof (Token)];

      // INTEGER
      char dummy54[sizeof (UnparsedConstant)];

      // IDENTIFIER
      // TYPE_IDENTIFIER
      // STRING_LITERAL
      char dummy55[sizeof (cstring)];
    };

    /// The size of the largest semantic type.
    enum { size = sizeof (union_type) };

    /// A buffer to store semantic values.
    union
    {
      /// Strongest alignment constraints.
      long double yyalign_me;
      /// A buffer large enough to store any of the semantic values.
      char yyraw[size];
    } yybuffer_;

    /// Whether the content is built: if defined, the name of the stored type.
    const std::type_info *yytypeid_;
  };

#else
    typedef YYSTYPE semantic_type;
#endif
    /// Symbol locations.
    typedef Util::SourceInfo location_type;

    /// Syntax errors thrown from user actions.
    struct syntax_error : std::runtime_error
    {
      syntax_error (const location_type& l, const std::string& m)
        : std::runtime_error (m)
        , location (l)
      {}

      syntax_error (const syntax_error& s)
        : std::runtime_error (s.what ())
        , location (s.location)
      {}

      ~syntax_error () YY_NOEXCEPT YY_NOTHROW;

      location_type location;
    };

    /// Tokens.
    struct token
    {
      enum yytokentype
      {
        TOK_START_PROGRAM = 258,
        TOK_START_EXPRESSION_LIST = 259,
        TOK_START_KV_LIST = 260,
        TOK_START_INTEGER_LIST = 261,
        TOK_START_INTEGER_OR_STRING_LITERAL_LIST = 262,
        TOK_START_STRING_LITERAL_LIST = 263,
        TOK_START_EXPRESSION = 264,
        TOK_START_INTEGER = 265,
        TOK_START_INTEGER_OR_STRING_LITERAL = 266,
        TOK_START_STRING_LITERAL = 267,
        TOK_START_EXPRESSION_PAIR = 268,
        TOK_START_INTEGER_PAIR = 269,
        TOK_START_STRING_LITERAL_PAIR = 270,
        TOK_START_EXPRESSION_TRIPLE = 271,
        TOK_START_INTEGER_TRIPLE = 272,
        TOK_START_STRING_LITERAL_TRIPLE = 273,
        TOK_START_P4RT_TRANSLATION_ANNOTATION = 274,
        TOK_END = 275,
        TOK_END_ANNOTATION = 276,
        TOK_UNEXPECTED_TOKEN = 277,
        TOK_END_PRAGMA = 278,
        TOK_LE = 279,
        TOK_GE = 280,
        TOK_SHL = 281,
        TOK_AND = 282,
        TOK_OR = 283,
        TOK_NE = 284,
        TOK_EQ = 285,
        TOK_PLUS = 286,
        TOK_MINUS = 287,
        TOK_PLUS_SAT = 288,
        TOK_MINUS_SAT = 289,
        TOK_MUL = 290,
        TOK_INVALID = 291,
        TOK_DIV = 292,
        TOK_MOD = 293,
        TOK_BIT_OR = 294,
        TOK_BIT_AND = 295,
        TOK_BIT_XOR = 296,
        TOK_COMPLEMENT = 297,
        TOK_L_BRACKET = 298,
        TOK_R_BRACKET = 299,
        TOK_L_BRACE = 300,
        TOK_R_BRACE = 301,
        TOK_L_ANGLE = 302,
        TOK_L_ANGLE_ARGS = 303,
        TOK_R_ANGLE = 304,
        TOK_R_ANGLE_SHIFT = 305,
        TOK_L_PAREN = 306,
        TOK_R_PAREN = 307,
        TOK_NOT = 308,
        TOK_COLON = 309,
        TOK_COMMA = 310,
        TOK_QUESTION = 311,
        TOK_DOT = 312,
        TOK_ASSIGN = 313,
        TOK_SEMICOLON = 314,
        TOK_AT = 315,
        TOK_PP = 316,
        TOK_DONTCARE = 317,
        TOK_MASK = 318,
        TOK_DOTS = 319,
        TOK_RANGE = 320,
        TOK_TRUE = 321,
        TOK_FALSE = 322,
        TOK_THIS = 323,
        TOK_ABSTRACT = 324,
        TOK_ACTION = 325,
        TOK_ACTIONS = 326,
        TOK_APPLY = 327,
        TOK_BOOL = 328,
        TOK_BIT = 329,
        TOK_CONST = 330,
        TOK_CONTROL = 331,
        TOK_DEFAULT = 332,
        TOK_ELSE = 333,
        TOK_ENTRIES = 334,
        TOK_ENUM = 335,
        TOK_ERROR = 336,
        TOK_EXIT = 337,
        TOK_EXTERN = 338,
        TOK_FOR = 339,
        TOK_HEADER = 340,
        TOK_HEADER_UNION = 341,
        TOK_IF = 342,
        TOK_IN = 343,
        TOK_INOUT = 344,
        TOK_INT = 345,
        TOK_KEY = 346,
        TOK_LIST = 347,
        TOK_SELECT = 348,
        TOK_MATCH_KIND = 349,
        TOK_TYPE = 350,
        TOK_OUT = 351,
        TOK_PACKAGE = 352,
        TOK_PARSER = 353,
        TOK_PRAGMA = 354,
        TOK_PRIORITY = 355,
        TOK_RETURN = 356,
        TOK_REGISTER = 357,
        TOK_REGACTION = 358,
        TOK_STATE = 359,
        TOK_STRING = 360,
        TOK_STRUCT = 361,
        TOK_SWITCH = 362,
        TOK_TABLE = 363,
        TOK_TRANSITION = 364,
        TOK_TUPLE = 365,
        TOK_TYPEDEF = 366,
        TOK_VARBIT = 367,
        TOK_VALUESET = 368,
        TOK_VOID = 369,
        TOK_WHILE = 370,
        TOK_IDENTIFIER = 371,
        TOK_TYPE_IDENTIFIER = 372,
        TOK_STRING_LITERAL = 373,
        TOK_INTEGER = 374,
        TOK_PREFIX = 375,
        TOK_THEN = 376
      };
    };

    /// (External) token type, as returned by yylex.
    typedef token::yytokentype token_type;

    /// Symbol type: an internal symbol number.
    typedef int symbol_number_type;

    /// The symbol type number to denote an empty symbol.
    enum { empty_symbol = -2 };

    /// Internal symbol number for tokens (subsumed by symbol_number_type).
    typedef signed char token_number_type;

    /// A complete symbol.
    ///
    /// Expects its Base type to provide access to the symbol type
    /// via type_get ().
    ///
    /// Provide access to semantic value and location.
    template <typename Base>
    struct basic_symbol : Base
    {
      /// Alias to Base.
      typedef Base super_type;

      /// Default constructor.
      basic_symbol ()
        : value ()
        , location ()
      {}

#if 201103L <= YY_CPLUSPLUS
      /// Move constructor.
      basic_symbol (basic_symbol&& that);
#endif

      /// Copy constructor.
      basic_symbol (const basic_symbol& that);

      /// Constructor for valueless symbols, and symbols from each type.
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, location_type&& l)
        : Base (t)
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const location_type& l)
        : Base (t)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, ConstType*&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const ConstType*& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, IR::Annotation*&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const IR::Annotation*& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, IR::Annotations*&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const IR::Annotations*& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, IR::Argument*&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const IR::Argument*& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, IR::BlockStatement*&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const IR::BlockStatement*& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, IR::Declaration*&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const IR::Declaration*& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, IR::Direction&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const IR::Direction& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, IR::Entry*&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const IR::Entry*& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, IR::Expression*&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const IR::Expression*& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, IR::ID*&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const IR::ID*& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, IR::IndexedVector<IR::ActionListElement>*&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const IR::IndexedVector<IR::ActionListElement>*& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, IR::IndexedVector<IR::Declaration>*&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const IR::IndexedVector<IR::Declaration>*& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, IR::IndexedVector<IR::Declaration_ID>*&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const IR::IndexedVector<IR::Declaration_ID>*& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, IR::IndexedVector<IR::NamedExpression>*&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const IR::IndexedVector<IR::NamedExpression>*& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, IR::IndexedVector<IR::Parameter>*&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const IR::IndexedVector<IR::Parameter>*& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, IR::IndexedVector<IR::ParserState>*&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const IR::IndexedVector<IR::ParserState>*& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, IR::IndexedVector<IR::Property>*&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const IR::IndexedVector<IR::Property>*& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, IR::IndexedVector<IR::SerEnumMember>*&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const IR::IndexedVector<IR::SerEnumMember>*& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, IR::IndexedVector<IR::StatOrDecl>*&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const IR::IndexedVector<IR::StatOrDecl>*& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, IR::IndexedVector<IR::StructField>*&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const IR::IndexedVector<IR::StructField>*& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, IR::IndexedVector<IR::Type_Var>*&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const IR::IndexedVector<IR::Type_Var>*& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, IR::KeyElement*&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const IR::KeyElement*& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, IR::Method*&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const IR::Method*& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, IR::NamedExpression*&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const IR::NamedExpression*& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, IR::Node*&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const IR::Node*& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, IR::Parameter*&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const IR::Parameter*& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, IR::ParserState*&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const IR::ParserState*& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, IR::Path*&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const IR::Path*& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, IR::Property*&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const IR::Property*& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, IR::SelectCase*&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const IR::SelectCase*& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, IR::SerEnumMember*&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const IR::SerEnumMember*& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, IR::StatOrDecl*&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const IR::StatOrDecl*& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, IR::Statement*&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const IR::Statement*& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, IR::StructField*&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const IR::StructField*& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, IR::SwitchCase*&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const IR::SwitchCase*& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, IR::TypeParameters*&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const IR::TypeParameters*& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, IR::Type_Control*&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const IR::Type_Control*& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, IR::Type_Declaration*&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const IR::Type_Declaration*& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, IR::Type_Error*&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const IR::Type_Error*& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, IR::Type_Name*&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const IR::Type_Name*& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, IR::Type_Parser*&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const IR::Type_Parser*& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, IR::Vector<IR::Annotation>*&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const IR::Vector<IR::Annotation>*& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, IR::Vector<IR::AnnotationToken>*&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const IR::Vector<IR::AnnotationToken>*& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, IR::Vector<IR::Argument>*&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const IR::Vector<IR::Argument>*& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, IR::Vector<IR::Entry>*&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const IR::Vector<IR::Entry>*& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, IR::Vector<IR::Expression>*&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const IR::Vector<IR::Expression>*& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, IR::Vector<IR::KeyElement>*&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const IR::Vector<IR::KeyElement>*& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, IR::Vector<IR::Method>*&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const IR::Vector<IR::Method>*& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, IR::Vector<IR::SelectCase>*&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const IR::Vector<IR::SelectCase>*& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, IR::Vector<IR::SwitchCase>*&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const IR::Vector<IR::SwitchCase>*& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, IR::Vector<IR::Type>*&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const IR::Vector<IR::Type>*& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, OptionalConst&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const OptionalConst& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, Token&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const Token& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, UnparsedConstant&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const UnparsedConstant& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, cstring&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const cstring& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif

      /// Destroy the symbol.
      ~basic_symbol ()
      {
        clear ();
      }

      /// Destroy contents, and record that is empty.
      void clear ()
      {
        // User destructor.
        symbol_number_type yytype = this->type_get ();
        basic_symbol<Base>& yysym = *this;
        (void) yysym;
        switch (yytype)
        {
       default:
          break;
        }

        // Type destructor.
switch (yytype)
    {
      case 193: // typeRef
      case 194: // namedType
      case 197: // p4listType
      case 198: // tupleType
      case 199: // headerStackType
      case 200: // specializedType
      case 201: // baseType
      case 202: // typeOrVoid
      case 206: // typeArg
      case 208: // realTypeArg
        value.template destroy< ConstType* > ();
        break;

      case 135: // annotation
        value.template destroy< IR::Annotation* > ();
        break;

      case 133: // optAnnotations
        value.template destroy< IR::Annotations* > ();
        break;

      case 270: // argument
        value.template destroy< IR::Argument* > ();
        break;

      case 148: // objInitializer
      case 165: // parserBlockStatement
      case 185: // controlBody
      case 242: // blockStatement
        value.template destroy< IR::BlockStatement* > ();
        break;

      case 147: // instantiation
      case 151: // objDeclaration
      case 156: // parserLocalElement
      case 178: // valueSetDeclaration
      case 184: // controlLocalDeclaration
      case 250: // tableDeclaration
      case 260: // actionDeclaration
      case 261: // registerActionDeclaration
      case 262: // variableDeclaration
      case 263: // registerDeclaration
      case 264: // constantDeclaration
      case 267: // functionDeclaration
        value.template destroy< IR::Declaration* > ();
        break;

      case 143: // direction
        value.template destroy< IR::Direction > ();
        break;

      case 257: // entry
        value.template destroy< IR::Entry* > ();
        break;

      case 125: // p4rtControllerType
      case 167: // transitionStatement
      case 168: // stateExpression
      case 169: // selectExpression
      case 172: // keysetExpression
      case 176: // reducedSimpleKeysetExpression
      case 177: // simpleKeysetExpression
      case 248: // switchLabel
      case 256: // actionRef
      case 258: // entryPriority
      case 265: // optInitializer
      case 266: // initializer
      case 275: // lvalue
      case 276: // expression
      case 277: // nonBraceExpression
      case 278: // intOrStr
        value.template destroy< IR::Expression* > ();
        break;

      case 129: // nonTypeName
      case 130: // name
      case 131: // nonTableKwName
      case 273: // dot_name
        value.template destroy< IR::ID* > ();
        break;

      case 255: // actionList
        value.template destroy< IR::IndexedVector<IR::ActionListElement>* > ();
        break;

      case 155: // parserLocalElements
      case 183: // controlLocalDeclarations
        value.template destroy< IR::IndexedVector<IR::Declaration>* > ();
        break;

      case 230: // identifierList
        value.template destroy< IR::IndexedVector<IR::Declaration_ID>* > ();
        break;

      case 138: // kvList
        value.template destroy< IR::IndexedVector<IR::NamedExpression>* > ();
        break;

      case 140: // parameterList
      case 141: // nonEmptyParameterList
      case 152: // optConstructorParameters
        value.template destroy< IR::IndexedVector<IR::Parameter>* > ();
        break;

      case 160: // parserStates
        value.template destroy< IR::IndexedVector<IR::ParserState>* > ();
        break;

      case 251: // tablePropertyList
        value.template destroy< IR::IndexedVector<IR::Property>* > ();
        break;

      case 226: // specifiedIdentifierList
        value.template destroy< IR::IndexedVector<IR::SerEnumMember>* > ();
        break;

      case 150: // objDeclarations
      case 163: // parserStatements
      case 244: // statOrDeclList
        value.template destroy< IR::IndexedVector<IR::StatOrDecl>* > ();
        break;

      case 221: // structFieldList
        value.template destroy< IR::IndexedVector<IR::StructField>* > ();
        break;

      case 205: // typeParameterList
        value.template destroy< IR::IndexedVector<IR::Type_Var>* > ();
        break;

      case 254: // keyElement
        value.template destroy< IR::KeyElement* > ();
        break;

      case 190: // functionPrototype
      case 192: // methodPrototype
        value.template destroy< IR::Method* > ();
        break;

      case 139: // kvPair
        value.template destroy< IR::NamedExpression* > ();
        break;

      case 124: // fragment
      case 128: // declaration
      case 186: // externDeclaration
      case 229: // matchKindDeclaration
        value.template destroy< IR::Node* > ();
        break;

      case 142: // parameter
        value.template destroy< IR::Parameter* > ();
        break;

      case 161: // parserState
        value.template destroy< IR::ParserState* > ();
        break;

      case 195: // prefixedType
      case 272: // prefixedNonTypeName
        value.template destroy< IR::Path* > ();
        break;

      case 252: // tableProperty
        value.template destroy< IR::Property* > ();
        break;

      case 171: // selectCase
        value.template destroy< IR::SelectCase* > ();
        break;

      case 227: // specifiedIdentifier
        value.template destroy< IR::SerEnumMember* > ();
        break;

      case 164: // parserStatement
      case 249: // statementOrDeclaration
        value.template destroy< IR::StatOrDecl* > ();
        break;

      case 232: // assignmentOrMethodCallStatement
      case 233: // emptyStatement
      case 234: // exitStatement
      case 235: // returnStatement
      case 236: // conditionalStatement
      case 237: // whileStatement
      case 238: // forStatement
      case 239: // forInitializer
      case 240: // directApplication
      case 241: // statement
      case 245: // switchStatement
        value.template destroy< IR::Statement* > ();
        break;

      case 222: // structField
        value.template destroy< IR::StructField* > ();
        break;

      case 247: // switchCase
        value.template destroy< IR::SwitchCase* > ();
        break;

      case 203: // optTypeParameters
      case 204: // typeParameters
        value.template destroy< IR::TypeParameters* > ();
        break;

      case 180: // controlTypeDeclaration
        value.template destroy< IR::Type_Control* > ();
        break;

      case 144: // packageTypeDeclaration
      case 154: // parserDeclaration
      case 179: // controlDeclaration
      case 210: // typeDeclaration
      case 211: // derivedTypeDeclaration
      case 212: // headerTypeDeclaration
      case 215: // structTypeDeclaration
      case 218: // headerUnionDeclaration
      case 223: // enumDeclaration
      case 231: // typedefDeclaration
        value.template destroy< IR::Type_Declaration* > ();
        break;

      case 228: // errorDeclaration
        value.template destroy< IR::Type_Error* > ();
        break;

      case 196: // typeName
        value.template destroy< IR::Type_Name* > ();
        break;

      case 157: // parserTypeDeclaration
        value.template destroy< IR::Type_Parser* > ();
        break;

      case 134: // annotations
        value.template destroy< IR::Vector<IR::Annotation>* > ();
        break;

      case 136: // annotationBody
        value.template destroy< IR::Vector<IR::AnnotationToken>* > ();
        break;

      case 268: // argumentList
      case 269: // nonEmptyArgList
        value.template destroy< IR::Vector<IR::Argument>* > ();
        break;

      case 259: // entriesList
        value.template destroy< IR::Vector<IR::Entry>* > ();
        break;

      case 173: // tupleKeysetExpression
      case 175: // simpleExpressionList
      case 271: // expressionList
      case 279: // intList
      case 280: // intOrStrList
      case 281: // strList
        value.template destroy< IR::Vector<IR::Expression>* > ();
        break;

      case 253: // keyElementList
        value.template destroy< IR::Vector<IR::KeyElement>* > ();
        break;

      case 189: // methodPrototypes
        value.template destroy< IR::Vector<IR::Method>* > ();
        break;

      case 170: // selectCaseList
        value.template destroy< IR::Vector<IR::SelectCase>* > ();
        break;

      case 246: // switchCases
        value.template destroy< IR::Vector<IR::SwitchCase>* > ();
        break;

      case 207: // typeArgumentList
      case 209: // realTypeArgumentList
        value.template destroy< IR::Vector<IR::Type>* > ();
        break;

      case 132: // optCONST
        value.template destroy< OptionalConst > ();
        break;

      case 22: // UNEXPECTED_TOKEN
      case 23: // END_PRAGMA
      case 24: // "<="
      case 25: // ">="
      case 26: // "<<"
      case 27: // "&&"
      case 28: // "||"
      case 29: // "!="
      case 30: // "=="
      case 31: // "+"
      case 32: // "-"
      case 33: // "|+|"
      case 34: // "|-|"
      case 35: // "*"
      case 36: // "{#}"
      case 37: // "/"
      case 38: // "%"
      case 39: // "|"
      case 40: // "&"
      case 41: // "^"
      case 42: // "~"
      case 43: // "["
      case 44: // "]"
      case 45: // "{"
      case 46: // "}"
      case 47: // "<"
      case 48: // L_ANGLE_ARGS
      case 49: // ">"
      case 50: // R_ANGLE_SHIFT
      case 51: // "("
      case 52: // ")"
      case 53: // "!"
      case 54: // ":"
      case 55: // ","
      case 56: // "?"
      case 57: // "."
      case 58: // "="
      case 59: // ";"
      case 60: // "@"
      case 61: // "++"
      case 62: // "_"
      case 63: // "&&&"
      case 64: // "..."
      case 65: // ".."
      case 66: // TRUE
      case 67: // FALSE
      case 68: // THIS
      case 69: // ABSTRACT
      case 70: // ACTION
      case 71: // ACTIONS
      case 72: // APPLY
      case 73: // BOOL
      case 74: // BIT
      case 75: // CONST
      case 76: // CONTROL
      case 77: // DEFAULT
      case 78: // ELSE
      case 79: // ENTRIES
      case 80: // ENUM
      case 81: // ERROR
      case 82: // EXIT
      case 83: // EXTERN
      case 84: // FOR
      case 85: // HEADER
      case 86: // HEADER_UNION
      case 87: // IF
      case 88: // IN
      case 89: // INOUT
      case 90: // INT
      case 91: // KEY
      case 92: // LIST
      case 93: // SELECT
      case 94: // MATCH_KIND
      case 95: // TYPE
      case 96: // OUT
      case 97: // PACKAGE
      case 98: // PARSER
      case 99: // PRAGMA
      case 100: // PRIORITY
      case 101: // RETURN
      case 102: // REGISTER
      case 103: // REGACTION
      case 104: // STATE
      case 105: // STRING
      case 106: // STRUCT
      case 107: // SWITCH
      case 108: // TABLE
      case 109: // TRANSITION
      case 110: // TUPLE
      case 111: // TYPEDEF
      case 112: // VARBIT
      case 113: // VALUESET
      case 114: // VOID
      case 115: // WHILE
      case 137: // annotationToken
        value.template destroy< Token > ();
        break;

      case 119: // INTEGER
        value.template destroy< UnparsedConstant > ();
        break;

      case 116: // IDENTIFIER
      case 117: // TYPE_IDENTIFIER
      case 118: // STRING_LITERAL
        value.template destroy< cstring > ();
        break;

      default:
        break;
    }

        Base::clear ();
      }

      /// Whether empty.
      bool empty () const YY_NOEXCEPT;

      /// Destructive move, \a s is emptied into this.
      void move (basic_symbol& s);

      /// The semantic value.
      semantic_type value;

      /// The location.
      location_type location;

    private:
#if YY_CPLUSPLUS < 201103L
      /// Assignment operator.
      basic_symbol& operator= (const basic_symbol& that);
#endif
    };

    /// Type access provider for token (enum) based symbols.
    struct by_type
    {
      /// Default constructor.
      by_type ();

#if 201103L <= YY_CPLUSPLUS
      /// Move constructor.
      by_type (by_type&& that);
#endif

      /// Copy constructor.
      by_type (const by_type& that);

      /// The symbol type as needed by the constructor.
      typedef token_type kind_type;

      /// Constructor from (external) token numbers.
      by_type (kind_type t);

      /// Record that this symbol is empty.
      void clear ();

      /// Steal the symbol type from \a that.
      void move (by_type& that);

      /// The (internal) type number (corresponding to \a type).
      /// \a empty when empty.
      symbol_number_type type_get () const YY_NOEXCEPT;

      /// The symbol type.
      /// \a empty_symbol when empty.
      /// An int, not token_number_type, to be able to store empty_symbol.
      int type;
    };

    /// "External" symbols: returned by the scanner.
    struct symbol_type : basic_symbol<by_type>
    {
      /// Superclass.
      typedef basic_symbol<by_type> super_type;

      /// Empty symbol.
      symbol_type () {}

      /// Constructor for valueless symbols, and symbols from each type.
#if 201103L <= YY_CPLUSPLUS
      symbol_type (int tok, location_type l)
        : super_type(token_type (tok), std::move (l))
      {
        YY_ASSERT (tok == 0 || tok == token::TOK_START_PROGRAM || tok == token::TOK_START_EXPRESSION_LIST || tok == token::TOK_START_KV_LIST || tok == token::TOK_START_INTEGER_LIST || tok == token::TOK_START_INTEGER_OR_STRING_LITERAL_LIST || tok == token::TOK_START_STRING_LITERAL_LIST || tok == token::TOK_START_EXPRESSION || tok == token::TOK_START_INTEGER || tok == token::TOK_START_INTEGER_OR_STRING_LITERAL || tok == token::TOK_START_STRING_LITERAL || tok == token::TOK_START_EXPRESSION_PAIR || tok == token::TOK_START_INTEGER_PAIR || tok == token::TOK_START_STRING_LITERAL_PAIR || tok == token::TOK_START_EXPRESSION_TRIPLE || tok == token::TOK_START_INTEGER_TRIPLE || tok == token::TOK_START_STRING_LITERAL_TRIPLE || tok == token::TOK_START_P4RT_TRANSLATION_ANNOTATION || tok == token::TOK_END || tok == token::TOK_END_ANNOTATION || tok == token::TOK_PREFIX || tok == token::TOK_THEN);
      }
#else
      symbol_type (int tok, const location_type& l)
        : super_type(token_type (tok), l)
      {
        YY_ASSERT (tok == 0 || tok == token::TOK_START_PROGRAM || tok == token::TOK_START_EXPRESSION_LIST || tok == token::TOK_START_KV_LIST || tok == token::TOK_START_INTEGER_LIST || tok == token::TOK_START_INTEGER_OR_STRING_LITERAL_LIST || tok == token::TOK_START_STRING_LITERAL_LIST || tok == token::TOK_START_EXPRESSION || tok == token::TOK_START_INTEGER || tok == token::TOK_START_INTEGER_OR_STRING_LITERAL || tok == token::TOK_START_STRING_LITERAL || tok == token::TOK_START_EXPRESSION_PAIR || tok == token::TOK_START_INTEGER_PAIR || tok == token::TOK_START_STRING_LITERAL_PAIR || tok == token::TOK_START_EXPRESSION_TRIPLE || tok == token::TOK_START_INTEGER_TRIPLE || tok == token::TOK_START_STRING_LITERAL_TRIPLE || tok == token::TOK_START_P4RT_TRANSLATION_ANNOTATION || tok == token::TOK_END || tok == token::TOK_END_ANNOTATION || tok == token::TOK_PREFIX || tok == token::TOK_THEN);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      symbol_type (int tok, Token v, location_type l)
        : super_type(token_type (tok), std::move (v), std::move (l))
      {
        YY_ASSERT (tok == token::TOK_UNEXPECTED_TOKEN || tok == token::TOK_END_PRAGMA || tok == token::TOK_LE || tok == token::TOK_GE || tok == token::TOK_SHL || tok == token::TOK_AND || tok == token::TOK_OR || tok == token::TOK_NE || tok == token::TOK_EQ || tok == token::TOK_PLUS || tok == token::TOK_MINUS || tok == token::TOK_PLUS_SAT || tok == token::TOK_MINUS_SAT || tok == token::TOK_MUL || tok == token::TOK_INVALID || tok == token::TOK_DIV || tok == token::TOK_MOD || tok == token::TOK_BIT_OR || tok == token::TOK_BIT_AND || tok == token::TOK_BIT_XOR || tok == token::TOK_COMPLEMENT || tok == token::TOK_L_BRACKET || tok == token::TOK_R_BRACKET || tok == token::TOK_L_BRACE || tok == token::TOK_R_BRACE || tok == token::TOK_L_ANGLE || tok == token::TOK_L_ANGLE_ARGS || tok == token::TOK_R_ANGLE || tok == token::TOK_R_ANGLE_SHIFT || tok == token::TOK_L_PAREN || tok == token::TOK_R_PAREN || tok == token::TOK_NOT || tok == token::TOK_COLON || tok == token::TOK_COMMA || tok == token::TOK_QUESTION || tok == token::TOK_DOT || tok == token::TOK_ASSIGN || tok == token::TOK_SEMICOLON || tok == token::TOK_AT || tok == token::TOK_PP || tok == token::TOK_DONTCARE || tok == token::TOK_MASK || tok == token::TOK_DOTS || tok == token::TOK_RANGE || tok == token::TOK_TRUE || tok == token::TOK_FALSE || tok == token::TOK_THIS || tok == token::TOK_ABSTRACT || tok == token::TOK_ACTION || tok == token::TOK_ACTIONS || tok == token::TOK_APPLY || tok == token::TOK_BOOL || tok == token::TOK_BIT || tok == token::TOK_CONST || tok == token::TOK_CONTROL || tok == token::TOK_DEFAULT || tok == token::TOK_ELSE || tok == token::TOK_ENTRIES || tok == token::TOK_ENUM || tok == token::TOK_ERROR || tok == token::TOK_EXIT || tok == token::TOK_EXTERN || tok == token::TOK_FOR || tok == token::TOK_HEADER || tok == token::TOK_HEADER_UNION || tok == token::TOK_IF || tok == token::TOK_IN || tok == token::TOK_INOUT || tok == token::TOK_INT || tok == token::TOK_KEY || tok == token::TOK_LIST || tok == token::TOK_SELECT || tok == token::TOK_MATCH_KIND || tok == token::TOK_TYPE || tok == token::TOK_OUT || tok == token::TOK_PACKAGE || tok == token::TOK_PARSER || tok == token::TOK_PRAGMA || tok == token::TOK_PRIORITY || tok == token::TOK_RETURN || tok == token::TOK_REGISTER || tok == token::TOK_REGACTION || tok == token::TOK_STATE || tok == token::TOK_STRING || tok == token::TOK_STRUCT || tok == token::TOK_SWITCH || tok == token::TOK_TABLE || tok == token::TOK_TRANSITION || tok == token::TOK_TUPLE || tok == token::TOK_TYPEDEF || tok == token::TOK_VARBIT || tok == token::TOK_VALUESET || tok == token::TOK_VOID || tok == token::TOK_WHILE);
      }
#else
      symbol_type (int tok, const Token& v, const location_type& l)
        : super_type(token_type (tok), v, l)
      {
        YY_ASSERT (tok == token::TOK_UNEXPECTED_TOKEN || tok == token::TOK_END_PRAGMA || tok == token::TOK_LE || tok == token::TOK_GE || tok == token::TOK_SHL || tok == token::TOK_AND || tok == token::TOK_OR || tok == token::TOK_NE || tok == token::TOK_EQ || tok == token::TOK_PLUS || tok == token::TOK_MINUS || tok == token::TOK_PLUS_SAT || tok == token::TOK_MINUS_SAT || tok == token::TOK_MUL || tok == token::TOK_INVALID || tok == token::TOK_DIV || tok == token::TOK_MOD || tok == token::TOK_BIT_OR || tok == token::TOK_BIT_AND || tok == token::TOK_BIT_XOR || tok == token::TOK_COMPLEMENT || tok == token::TOK_L_BRACKET || tok == token::TOK_R_BRACKET || tok == token::TOK_L_BRACE || tok == token::TOK_R_BRACE || tok == token::TOK_L_ANGLE || tok == token::TOK_L_ANGLE_ARGS || tok == token::TOK_R_ANGLE || tok == token::TOK_R_ANGLE_SHIFT || tok == token::TOK_L_PAREN || tok == token::TOK_R_PAREN || tok == token::TOK_NOT || tok == token::TOK_COLON || tok == token::TOK_COMMA || tok == token::TOK_QUESTION || tok == token::TOK_DOT || tok == token::TOK_ASSIGN || tok == token::TOK_SEMICOLON || tok == token::TOK_AT || tok == token::TOK_PP || tok == token::TOK_DONTCARE || tok == token::TOK_MASK || tok == token::TOK_DOTS || tok == token::TOK_RANGE || tok == token::TOK_TRUE || tok == token::TOK_FALSE || tok == token::TOK_THIS || tok == token::TOK_ABSTRACT || tok == token::TOK_ACTION || tok == token::TOK_ACTIONS || tok == token::TOK_APPLY || tok == token::TOK_BOOL || tok == token::TOK_BIT || tok == token::TOK_CONST || tok == token::TOK_CONTROL || tok == token::TOK_DEFAULT || tok == token::TOK_ELSE || tok == token::TOK_ENTRIES || tok == token::TOK_ENUM || tok == token::TOK_ERROR || tok == token::TOK_EXIT || tok == token::TOK_EXTERN || tok == token::TOK_FOR || tok == token::TOK_HEADER || tok == token::TOK_HEADER_UNION || tok == token::TOK_IF || tok == token::TOK_IN || tok == token::TOK_INOUT || tok == token::TOK_INT || tok == token::TOK_KEY || tok == token::TOK_LIST || tok == token::TOK_SELECT || tok == token::TOK_MATCH_KIND || tok == token::TOK_TYPE || tok == token::TOK_OUT || tok == token::TOK_PACKAGE || tok == token::TOK_PARSER || tok == token::TOK_PRAGMA || tok == token::TOK_PRIORITY || tok == token::TOK_RETURN || tok == token::TOK_REGISTER || tok == token::TOK_REGACTION || tok == token::TOK_STATE || tok == token::TOK_STRING || tok == token::TOK_STRUCT || tok == token::TOK_SWITCH || tok == token::TOK_TABLE || tok == token::TOK_TRANSITION || tok == token::TOK_TUPLE || tok == token::TOK_TYPEDEF || tok == token::TOK_VARBIT || tok == token::TOK_VALUESET || tok == token::TOK_VOID || tok == token::TOK_WHILE);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      symbol_type (int tok, UnparsedConstant v, location_type l)
        : super_type(token_type (tok), std::move (v), std::move (l))
      {
        YY_ASSERT (tok == token::TOK_INTEGER);
      }
#else
      symbol_type (int tok, const UnparsedConstant& v, const location_type& l)
        : super_type(token_type (tok), v, l)
      {
        YY_ASSERT (tok == token::TOK_INTEGER);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      symbol_type (int tok, cstring v, location_type l)
        : super_type(token_type (tok), std::move (v), std::move (l))
      {
        YY_ASSERT (tok == token::TOK_IDENTIFIER || tok == token::TOK_TYPE_IDENTIFIER || tok == token::TOK_STRING_LITERAL);
      }
#else
      symbol_type (int tok, const cstring& v, const location_type& l)
        : super_type(token_type (tok), v, l)
      {
        YY_ASSERT (tok == token::TOK_IDENTIFIER || tok == token::TOK_TYPE_IDENTIFIER || tok == token::TOK_STRING_LITERAL);
      }
#endif
    };

    /// Build a parser object.
    P4Parser (P4::P4ParserDriver& driver_yyarg, P4::AbstractP4Lexer& lexer_yyarg);
    virtual ~P4Parser ();

    /// Parse.  An alias for parse ().
    /// \returns  0 iff parsing succeeded.
    int operator() ();

    /// Parse.
    /// \returns  0 iff parsing succeeded.
    virtual int parse ();

#if YYDEBUG
    /// The current debugging stream.
    std::ostream& debug_stream () const YY_ATTRIBUTE_PURE;
    /// Set the current debugging stream.
    void set_debug_stream (std::ostream &);

    /// Type for debugging levels.
    typedef int debug_level_type;
    /// The current debugging level.
    debug_level_type debug_level () const YY_ATTRIBUTE_PURE;
    /// Set the current debugging level.
    void set_debug_level (debug_level_type l);
#endif

    /// Report a syntax error.
    /// \param loc    where the syntax error is found.
    /// \param msg    a description of the syntax error.
    virtual void error (const location_type& loc, const std::string& msg);

    /// Report a syntax error.
    void error (const syntax_error& err);

    // Implementation of make_symbol for each symbol type.
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_START_PROGRAM (location_type l)
      {
        return symbol_type (token::TOK_START_PROGRAM, std::move (l));
      }
#else
      static
      symbol_type
      make_START_PROGRAM (const location_type& l)
      {
        return symbol_type (token::TOK_START_PROGRAM, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_START_EXPRESSION_LIST (location_type l)
      {
        return symbol_type (token::TOK_START_EXPRESSION_LIST, std::move (l));
      }
#else
      static
      symbol_type
      make_START_EXPRESSION_LIST (const location_type& l)
      {
        return symbol_type (token::TOK_START_EXPRESSION_LIST, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_START_KV_LIST (location_type l)
      {
        return symbol_type (token::TOK_START_KV_LIST, std::move (l));
      }
#else
      static
      symbol_type
      make_START_KV_LIST (const location_type& l)
      {
        return symbol_type (token::TOK_START_KV_LIST, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_START_INTEGER_LIST (location_type l)
      {
        return symbol_type (token::TOK_START_INTEGER_LIST, std::move (l));
      }
#else
      static
      symbol_type
      make_START_INTEGER_LIST (const location_type& l)
      {
        return symbol_type (token::TOK_START_INTEGER_LIST, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_START_INTEGER_OR_STRING_LITERAL_LIST (location_type l)
      {
        return symbol_type (token::TOK_START_INTEGER_OR_STRING_LITERAL_LIST, std::move (l));
      }
#else
      static
      symbol_type
      make_START_INTEGER_OR_STRING_LITERAL_LIST (const location_type& l)
      {
        return symbol_type (token::TOK_START_INTEGER_OR_STRING_LITERAL_LIST, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_START_STRING_LITERAL_LIST (location_type l)
      {
        return symbol_type (token::TOK_START_STRING_LITERAL_LIST, std::move (l));
      }
#else
      static
      symbol_type
      make_START_STRING_LITERAL_LIST (const location_type& l)
      {
        return symbol_type (token::TOK_START_STRING_LITERAL_LIST, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_START_EXPRESSION (location_type l)
      {
        return symbol_type (token::TOK_START_EXPRESSION, std::move (l));
      }
#else
      static
      symbol_type
      make_START_EXPRESSION (const location_type& l)
      {
        return symbol_type (token::TOK_START_EXPRESSION, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_START_INTEGER (location_type l)
      {
        return symbol_type (token::TOK_START_INTEGER, std::move (l));
      }
#else
      static
      symbol_type
      make_START_INTEGER (const location_type& l)
      {
        return symbol_type (token::TOK_START_INTEGER, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_START_INTEGER_OR_STRING_LITERAL (location_type l)
      {
        return symbol_type (token::TOK_START_INTEGER_OR_STRING_LITERAL, std::move (l));
      }
#else
      static
      symbol_type
      make_START_INTEGER_OR_STRING_LITERAL (const location_type& l)
      {
        return symbol_type (token::TOK_START_INTEGER_OR_STRING_LITERAL, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_START_STRING_LITERAL (location_type l)
      {
        return symbol_type (token::TOK_START_STRING_LITERAL, std::move (l));
      }
#else
      static
      symbol_type
      make_START_STRING_LITERAL (const location_type& l)
      {
        return symbol_type (token::TOK_START_STRING_LITERAL, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_START_EXPRESSION_PAIR (location_type l)
      {
        return symbol_type (token::TOK_START_EXPRESSION_PAIR, std::move (l));
      }
#else
      static
      symbol_type
      make_START_EXPRESSION_PAIR (const location_type& l)
      {
        return symbol_type (token::TOK_START_EXPRESSION_PAIR, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_START_INTEGER_PAIR (location_type l)
      {
        return symbol_type (token::TOK_START_INTEGER_PAIR, std::move (l));
      }
#else
      static
      symbol_type
      make_START_INTEGER_PAIR (const location_type& l)
      {
        return symbol_type (token::TOK_START_INTEGER_PAIR, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_START_STRING_LITERAL_PAIR (location_type l)
      {
        return symbol_type (token::TOK_START_STRING_LITERAL_PAIR, std::move (l));
      }
#else
      static
      symbol_type
      make_START_STRING_LITERAL_PAIR (const location_type& l)
      {
        return symbol_type (token::TOK_START_STRING_LITERAL_PAIR, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_START_EXPRESSION_TRIPLE (location_type l)
      {
        return symbol_type (token::TOK_START_EXPRESSION_TRIPLE, std::move (l));
      }
#else
      static
      symbol_type
      make_START_EXPRESSION_TRIPLE (const location_type& l)
      {
        return symbol_type (token::TOK_START_EXPRESSION_TRIPLE, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_START_INTEGER_TRIPLE (location_type l)
      {
        return symbol_type (token::TOK_START_INTEGER_TRIPLE, std::move (l));
      }
#else
      static
      symbol_type
      make_START_INTEGER_TRIPLE (const location_type& l)
      {
        return symbol_type (token::TOK_START_INTEGER_TRIPLE, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_START_STRING_LITERAL_TRIPLE (location_type l)
      {
        return symbol_type (token::TOK_START_STRING_LITERAL_TRIPLE, std::move (l));
      }
#else
      static
      symbol_type
      make_START_STRING_LITERAL_TRIPLE (const location_type& l)
      {
        return symbol_type (token::TOK_START_STRING_LITERAL_TRIPLE, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_START_P4RT_TRANSLATION_ANNOTATION (location_type l)
      {
        return symbol_type (token::TOK_START_P4RT_TRANSLATION_ANNOTATION, std::move (l));
      }
#else
      static
      symbol_type
      make_START_P4RT_TRANSLATION_ANNOTATION (const location_type& l)
      {
        return symbol_type (token::TOK_START_P4RT_TRANSLATION_ANNOTATION, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_END (location_type l)
      {
        return symbol_type (token::TOK_END, std::move (l));
      }
#else
      static
      symbol_type
      make_END (const location_type& l)
      {
        return symbol_type (token::TOK_END, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_END_ANNOTATION (location_type l)
      {
        return symbol_type (token::TOK_END_ANNOTATION, std::move (l));
      }
#else
      static
      symbol_type
      make_END_ANNOTATION (const location_type& l)
      {
        return symbol_type (token::TOK_END_ANNOTATION, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_UNEXPECTED_TOKEN (Token v, location_type l)
      {
        return symbol_type (token::TOK_UNEXPECTED_TOKEN, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_UNEXPECTED_TOKEN (const Token& v, const location_type& l)
      {
        return symbol_type (token::TOK_UNEXPECTED_TOKEN, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_END_PRAGMA (Token v, location_type l)
      {
        return symbol_type (token::TOK_END_PRAGMA, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_END_PRAGMA (const Token& v, const location_type& l)
      {
        return symbol_type (token::TOK_END_PRAGMA, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_LE (Token v, location_type l)
      {
        return symbol_type (token::TOK_LE, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_LE (const Token& v, const location_type& l)
      {
        return symbol_type (token::TOK_LE, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_GE (Token v, location_type l)
      {
        return symbol_type (token::TOK_GE, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_GE (const Token& v, const location_type& l)
      {
        return symbol_type (token::TOK_GE, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_SHL (Token v, location_type l)
      {
        return symbol_type (token::TOK_SHL, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_SHL (const Token& v, const location_type& l)
      {
        return symbol_type (token::TOK_SHL, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_AND (Token v, location_type l)
      {
        return symbol_type (token::TOK_AND, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_AND (const Token& v, const location_type& l)
      {
        return symbol_type (token::TOK_AND, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_OR (Token v, location_type l)
      {
        return symbol_type (token::TOK_OR, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_OR (const Token& v, const location_type& l)
      {
        return symbol_type (token::TOK_OR, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_NE (Token v, location_type l)
      {
        return symbol_type (token::TOK_NE, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_NE (const Token& v, const location_type& l)
      {
        return symbol_type (token::TOK_NE, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_EQ (Token v, location_type l)
      {
        return symbol_type (token::TOK_EQ, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_EQ (const Token& v, const location_type& l)
      {
        return symbol_type (token::TOK_EQ, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_PLUS (Token v, location_type l)
      {
        return symbol_type (token::TOK_PLUS, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_PLUS (const Token& v, const location_type& l)
      {
        return symbol_type (token::TOK_PLUS, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_MINUS (Token v, location_type l)
      {
        return symbol_type (token::TOK_MINUS, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_MINUS (const Token& v, const location_type& l)
      {
        return symbol_type (token::TOK_MINUS, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_PLUS_SAT (Token v, location_type l)
      {
        return symbol_type (token::TOK_PLUS_SAT, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_PLUS_SAT (const Token& v, const location_type& l)
      {
        return symbol_type (token::TOK_PLUS_SAT, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_MINUS_SAT (Token v, location_type l)
      {
        return symbol_type (token::TOK_MINUS_SAT, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_MINUS_SAT (const Token& v, const location_type& l)
      {
        return symbol_type (token::TOK_MINUS_SAT, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_MUL (Token v, location_type l)
      {
        return symbol_type (token::TOK_MUL, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_MUL (const Token& v, const location_type& l)
      {
        return symbol_type (token::TOK_MUL, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_INVALID (Token v, location_type l)
      {
        return symbol_type (token::TOK_INVALID, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_INVALID (const Token& v, const location_type& l)
      {
        return symbol_type (token::TOK_INVALID, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_DIV (Token v, location_type l)
      {
        return symbol_type (token::TOK_DIV, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_DIV (const Token& v, const location_type& l)
      {
        return symbol_type (token::TOK_DIV, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_MOD (Token v, location_type l)
      {
        return symbol_type (token::TOK_MOD, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_MOD (const Token& v, const location_type& l)
      {
        return symbol_type (token::TOK_MOD, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_BIT_OR (Token v, location_type l)
      {
        return symbol_type (token::TOK_BIT_OR, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_BIT_OR (const Token& v, const location_type& l)
      {
        return symbol_type (token::TOK_BIT_OR, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_BIT_AND (Token v, location_type l)
      {
        return symbol_type (token::TOK_BIT_AND, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_BIT_AND (const Token& v, const location_type& l)
      {
        return symbol_type (token::TOK_BIT_AND, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_BIT_XOR (Token v, location_type l)
      {
        return symbol_type (token::TOK_BIT_XOR, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_BIT_XOR (const Token& v, const location_type& l)
      {
        return symbol_type (token::TOK_BIT_XOR, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_COMPLEMENT (Token v, location_type l)
      {
        return symbol_type (token::TOK_COMPLEMENT, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_COMPLEMENT (const Token& v, const location_type& l)
      {
        return symbol_type (token::TOK_COMPLEMENT, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_L_BRACKET (Token v, location_type l)
      {
        return symbol_type (token::TOK_L_BRACKET, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_L_BRACKET (const Token& v, const location_type& l)
      {
        return symbol_type (token::TOK_L_BRACKET, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_R_BRACKET (Token v, location_type l)
      {
        return symbol_type (token::TOK_R_BRACKET, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_R_BRACKET (const Token& v, const location_type& l)
      {
        return symbol_type (token::TOK_R_BRACKET, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_L_BRACE (Token v, location_type l)
      {
        return symbol_type (token::TOK_L_BRACE, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_L_BRACE (const Token& v, const location_type& l)
      {
        return symbol_type (token::TOK_L_BRACE, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_R_BRACE (Token v, location_type l)
      {
        return symbol_type (token::TOK_R_BRACE, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_R_BRACE (const Token& v, const location_type& l)
      {
        return symbol_type (token::TOK_R_BRACE, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_L_ANGLE (Token v, location_type l)
      {
        return symbol_type (token::TOK_L_ANGLE, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_L_ANGLE (const Token& v, const location_type& l)
      {
        return symbol_type (token::TOK_L_ANGLE, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_L_ANGLE_ARGS (Token v, location_type l)
      {
        return symbol_type (token::TOK_L_ANGLE_ARGS, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_L_ANGLE_ARGS (const Token& v, const location_type& l)
      {
        return symbol_type (token::TOK_L_ANGLE_ARGS, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_R_ANGLE (Token v, location_type l)
      {
        return symbol_type (token::TOK_R_ANGLE, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_R_ANGLE (const Token& v, const location_type& l)
      {
        return symbol_type (token::TOK_R_ANGLE, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_R_ANGLE_SHIFT (Token v, location_type l)
      {
        return symbol_type (token::TOK_R_ANGLE_SHIFT, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_R_ANGLE_SHIFT (const Token& v, const location_type& l)
      {
        return symbol_type (token::TOK_R_ANGLE_SHIFT, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_L_PAREN (Token v, location_type l)
      {
        return symbol_type (token::TOK_L_PAREN, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_L_PAREN (const Token& v, const location_type& l)
      {
        return symbol_type (token::TOK_L_PAREN, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_R_PAREN (Token v, location_type l)
      {
        return symbol_type (token::TOK_R_PAREN, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_R_PAREN (const Token& v, const location_type& l)
      {
        return symbol_type (token::TOK_R_PAREN, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_NOT (Token v, location_type l)
      {
        return symbol_type (token::TOK_NOT, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_NOT (const Token& v, const location_type& l)
      {
        return symbol_type (token::TOK_NOT, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_COLON (Token v, location_type l)
      {
        return symbol_type (token::TOK_COLON, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_COLON (const Token& v, const location_type& l)
      {
        return symbol_type (token::TOK_COLON, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_COMMA (Token v, location_type l)
      {
        return symbol_type (token::TOK_COMMA, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_COMMA (const Token& v, const location_type& l)
      {
        return symbol_type (token::TOK_COMMA, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_QUESTION (Token v, location_type l)
      {
        return symbol_type (token::TOK_QUESTION, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_QUESTION (const Token& v, const location_type& l)
      {
        return symbol_type (token::TOK_QUESTION, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_DOT (Token v, location_type l)
      {
        return symbol_type (token::TOK_DOT, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_DOT (const Token& v, const location_type& l)
      {
        return symbol_type (token::TOK_DOT, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_ASSIGN (Token v, location_type l)
      {
        return symbol_type (token::TOK_ASSIGN, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_ASSIGN (const Token& v, const location_type& l)
      {
        return symbol_type (token::TOK_ASSIGN, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_SEMICOLON (Token v, location_type l)
      {
        return symbol_type (token::TOK_SEMICOLON, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_SEMICOLON (const Token& v, const location_type& l)
      {
        return symbol_type (token::TOK_SEMICOLON, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_AT (Token v, location_type l)
      {
        return symbol_type (token::TOK_AT, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_AT (const Token& v, const location_type& l)
      {
        return symbol_type (token::TOK_AT, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_PP (Token v, location_type l)
      {
        return symbol_type (token::TOK_PP, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_PP (const Token& v, const location_type& l)
      {
        return symbol_type (token::TOK_PP, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_DONTCARE (Token v, location_type l)
      {
        return symbol_type (token::TOK_DONTCARE, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_DONTCARE (const Token& v, const location_type& l)
      {
        return symbol_type (token::TOK_DONTCARE, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_MASK (Token v, location_type l)
      {
        return symbol_type (token::TOK_MASK, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_MASK (const Token& v, const location_type& l)
      {
        return symbol_type (token::TOK_MASK, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_DOTS (Token v, location_type l)
      {
        return symbol_type (token::TOK_DOTS, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_DOTS (const Token& v, const location_type& l)
      {
        return symbol_type (token::TOK_DOTS, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_RANGE (Token v, location_type l)
      {
        return symbol_type (token::TOK_RANGE, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_RANGE (const Token& v, const location_type& l)
      {
        return symbol_type (token::TOK_RANGE, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_TRUE (Token v, location_type l)
      {
        return symbol_type (token::TOK_TRUE, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_TRUE (const Token& v, const location_type& l)
      {
        return symbol_type (token::TOK_TRUE, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_FALSE (Token v, location_type l)
      {
        return symbol_type (token::TOK_FALSE, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_FALSE (const Token& v, const location_type& l)
      {
        return symbol_type (token::TOK_FALSE, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_THIS (Token v, location_type l)
      {
        return symbol_type (token::TOK_THIS, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_THIS (const Token& v, const location_type& l)
      {
        return symbol_type (token::TOK_THIS, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_ABSTRACT (Token v, location_type l)
      {
        return symbol_type (token::TOK_ABSTRACT, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_ABSTRACT (const Token& v, const location_type& l)
      {
        return symbol_type (token::TOK_ABSTRACT, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_ACTION (Token v, location_type l)
      {
        return symbol_type (token::TOK_ACTION, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_ACTION (const Token& v, const location_type& l)
      {
        return symbol_type (token::TOK_ACTION, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_ACTIONS (Token v, location_type l)
      {
        return symbol_type (token::TOK_ACTIONS, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_ACTIONS (const Token& v, const location_type& l)
      {
        return symbol_type (token::TOK_ACTIONS, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_APPLY (Token v, location_type l)
      {
        return symbol_type (token::TOK_APPLY, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_APPLY (const Token& v, const location_type& l)
      {
        return symbol_type (token::TOK_APPLY, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_BOOL (Token v, location_type l)
      {
        return symbol_type (token::TOK_BOOL, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_BOOL (const Token& v, const location_type& l)
      {
        return symbol_type (token::TOK_BOOL, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_BIT (Token v, location_type l)
      {
        return symbol_type (token::TOK_BIT, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_BIT (const Token& v, const location_type& l)
      {
        return symbol_type (token::TOK_BIT, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_CONST (Token v, location_type l)
      {
        return symbol_type (token::TOK_CONST, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_CONST (const Token& v, const location_type& l)
      {
        return symbol_type (token::TOK_CONST, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_CONTROL (Token v, location_type l)
      {
        return symbol_type (token::TOK_CONTROL, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_CONTROL (const Token& v, const location_type& l)
      {
        return symbol_type (token::TOK_CONTROL, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_DEFAULT (Token v, location_type l)
      {
        return symbol_type (token::TOK_DEFAULT, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_DEFAULT (const Token& v, const location_type& l)
      {
        return symbol_type (token::TOK_DEFAULT, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_ELSE (Token v, location_type l)
      {
        return symbol_type (token::TOK_ELSE, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_ELSE (const Token& v, const location_type& l)
      {
        return symbol_type (token::TOK_ELSE, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_ENTRIES (Token v, location_type l)
      {
        return symbol_type (token::TOK_ENTRIES, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_ENTRIES (const Token& v, const location_type& l)
      {
        return symbol_type (token::TOK_ENTRIES, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_ENUM (Token v, location_type l)
      {
        return symbol_type (token::TOK_ENUM, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_ENUM (const Token& v, const location_type& l)
      {
        return symbol_type (token::TOK_ENUM, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_ERROR (Token v, location_type l)
      {
        return symbol_type (token::TOK_ERROR, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_ERROR (const Token& v, const location_type& l)
      {
        return symbol_type (token::TOK_ERROR, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_EXIT (Token v, location_type l)
      {
        return symbol_type (token::TOK_EXIT, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_EXIT (const Token& v, const location_type& l)
      {
        return symbol_type (token::TOK_EXIT, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_EXTERN (Token v, location_type l)
      {
        return symbol_type (token::TOK_EXTERN, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_EXTERN (const Token& v, const location_type& l)
      {
        return symbol_type (token::TOK_EXTERN, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_FOR (Token v, location_type l)
      {
        return symbol_type (token::TOK_FOR, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_FOR (const Token& v, const location_type& l)
      {
        return symbol_type (token::TOK_FOR, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_HEADER (Token v, location_type l)
      {
        return symbol_type (token::TOK_HEADER, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_HEADER (const Token& v, const location_type& l)
      {
        return symbol_type (token::TOK_HEADER, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_HEADER_UNION (Token v, location_type l)
      {
        return symbol_type (token::TOK_HEADER_UNION, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_HEADER_UNION (const Token& v, const location_type& l)
      {
        return symbol_type (token::TOK_HEADER_UNION, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_IF (Token v, location_type l)
      {
        return symbol_type (token::TOK_IF, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_IF (const Token& v, const location_type& l)
      {
        return symbol_type (token::TOK_IF, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_IN (Token v, location_type l)
      {
        return symbol_type (token::TOK_IN, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_IN (const Token& v, const location_type& l)
      {
        return symbol_type (token::TOK_IN, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_INOUT (Token v, location_type l)
      {
        return symbol_type (token::TOK_INOUT, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_INOUT (const Token& v, const location_type& l)
      {
        return symbol_type (token::TOK_INOUT, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_INT (Token v, location_type l)
      {
        return symbol_type (token::TOK_INT, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_INT (const Token& v, const location_type& l)
      {
        return symbol_type (token::TOK_INT, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_KEY (Token v, location_type l)
      {
        return symbol_type (token::TOK_KEY, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_KEY (const Token& v, const location_type& l)
      {
        return symbol_type (token::TOK_KEY, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_LIST (Token v, location_type l)
      {
        return symbol_type (token::TOK_LIST, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_LIST (const Token& v, const location_type& l)
      {
        return symbol_type (token::TOK_LIST, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_SELECT (Token v, location_type l)
      {
        return symbol_type (token::TOK_SELECT, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_SELECT (const Token& v, const location_type& l)
      {
        return symbol_type (token::TOK_SELECT, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_MATCH_KIND (Token v, location_type l)
      {
        return symbol_type (token::TOK_MATCH_KIND, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_MATCH_KIND (const Token& v, const location_type& l)
      {
        return symbol_type (token::TOK_MATCH_KIND, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_TYPE (Token v, location_type l)
      {
        return symbol_type (token::TOK_TYPE, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_TYPE (const Token& v, const location_type& l)
      {
        return symbol_type (token::TOK_TYPE, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_OUT (Token v, location_type l)
      {
        return symbol_type (token::TOK_OUT, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_OUT (const Token& v, const location_type& l)
      {
        return symbol_type (token::TOK_OUT, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_PACKAGE (Token v, location_type l)
      {
        return symbol_type (token::TOK_PACKAGE, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_PACKAGE (const Token& v, const location_type& l)
      {
        return symbol_type (token::TOK_PACKAGE, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_PARSER (Token v, location_type l)
      {
        return symbol_type (token::TOK_PARSER, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_PARSER (const Token& v, const location_type& l)
      {
        return symbol_type (token::TOK_PARSER, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_PRAGMA (Token v, location_type l)
      {
        return symbol_type (token::TOK_PRAGMA, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_PRAGMA (const Token& v, const location_type& l)
      {
        return symbol_type (token::TOK_PRAGMA, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_PRIORITY (Token v, location_type l)
      {
        return symbol_type (token::TOK_PRIORITY, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_PRIORITY (const Token& v, const location_type& l)
      {
        return symbol_type (token::TOK_PRIORITY, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_RETURN (Token v, location_type l)
      {
        return symbol_type (token::TOK_RETURN, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_RETURN (const Token& v, const location_type& l)
      {
        return symbol_type (token::TOK_RETURN, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_REGISTER (Token v, location_type l)
      {
        return symbol_type (token::TOK_REGISTER, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_REGISTER (const Token& v, const location_type& l)
      {
        return symbol_type (token::TOK_REGISTER, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_REGACTION (Token v, location_type l)
      {
        return symbol_type (token::TOK_REGACTION, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_REGACTION (const Token& v, const location_type& l)
      {
        return symbol_type (token::TOK_REGACTION, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_STATE (Token v, location_type l)
      {
        return symbol_type (token::TOK_STATE, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_STATE (const Token& v, const location_type& l)
      {
        return symbol_type (token::TOK_STATE, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_STRING (Token v, location_type l)
      {
        return symbol_type (token::TOK_STRING, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_STRING (const Token& v, const location_type& l)
      {
        return symbol_type (token::TOK_STRING, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_STRUCT (Token v, location_type l)
      {
        return symbol_type (token::TOK_STRUCT, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_STRUCT (const Token& v, const location_type& l)
      {
        return symbol_type (token::TOK_STRUCT, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_SWITCH (Token v, location_type l)
      {
        return symbol_type (token::TOK_SWITCH, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_SWITCH (const Token& v, const location_type& l)
      {
        return symbol_type (token::TOK_SWITCH, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_TABLE (Token v, location_type l)
      {
        return symbol_type (token::TOK_TABLE, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_TABLE (const Token& v, const location_type& l)
      {
        return symbol_type (token::TOK_TABLE, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_TRANSITION (Token v, location_type l)
      {
        return symbol_type (token::TOK_TRANSITION, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_TRANSITION (const Token& v, const location_type& l)
      {
        return symbol_type (token::TOK_TRANSITION, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_TUPLE (Token v, location_type l)
      {
        return symbol_type (token::TOK_TUPLE, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_TUPLE (const Token& v, const location_type& l)
      {
        return symbol_type (token::TOK_TUPLE, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_TYPEDEF (Token v, location_type l)
      {
        return symbol_type (token::TOK_TYPEDEF, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_TYPEDEF (const Token& v, const location_type& l)
      {
        return symbol_type (token::TOK_TYPEDEF, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_VARBIT (Token v, location_type l)
      {
        return symbol_type (token::TOK_VARBIT, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_VARBIT (const Token& v, const location_type& l)
      {
        return symbol_type (token::TOK_VARBIT, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_VALUESET (Token v, location_type l)
      {
        return symbol_type (token::TOK_VALUESET, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_VALUESET (const Token& v, const location_type& l)
      {
        return symbol_type (token::TOK_VALUESET, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_VOID (Token v, location_type l)
      {
        return symbol_type (token::TOK_VOID, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_VOID (const Token& v, const location_type& l)
      {
        return symbol_type (token::TOK_VOID, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_WHILE (Token v, location_type l)
      {
        return symbol_type (token::TOK_WHILE, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_WHILE (const Token& v, const location_type& l)
      {
        return symbol_type (token::TOK_WHILE, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_IDENTIFIER (cstring v, location_type l)
      {
        return symbol_type (token::TOK_IDENTIFIER, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_IDENTIFIER (const cstring& v, const location_type& l)
      {
        return symbol_type (token::TOK_IDENTIFIER, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_TYPE_IDENTIFIER (cstring v, location_type l)
      {
        return symbol_type (token::TOK_TYPE_IDENTIFIER, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_TYPE_IDENTIFIER (const cstring& v, const location_type& l)
      {
        return symbol_type (token::TOK_TYPE_IDENTIFIER, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_STRING_LITERAL (cstring v, location_type l)
      {
        return symbol_type (token::TOK_STRING_LITERAL, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_STRING_LITERAL (const cstring& v, const location_type& l)
      {
        return symbol_type (token::TOK_STRING_LITERAL, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_INTEGER (UnparsedConstant v, location_type l)
      {
        return symbol_type (token::TOK_INTEGER, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_INTEGER (const UnparsedConstant& v, const location_type& l)
      {
        return symbol_type (token::TOK_INTEGER, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_PREFIX (location_type l)
      {
        return symbol_type (token::TOK_PREFIX, std::move (l));
      }
#else
      static
      symbol_type
      make_PREFIX (const location_type& l)
      {
        return symbol_type (token::TOK_PREFIX, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_THEN (location_type l)
      {
        return symbol_type (token::TOK_THEN, std::move (l));
      }
#else
      static
      symbol_type
      make_THEN (const location_type& l)
      {
        return symbol_type (token::TOK_THEN, l);
      }
#endif


  private:
    /// This class is not copyable.
    P4Parser (const P4Parser&);
    P4Parser& operator= (const P4Parser&);

    /// Stored state numbers (used for stacks).
    typedef short state_type;

    /// Generate an error message.
    /// \param yystate   the state where the error occurred.
    /// \param yyla      the lookahead token.
    virtual std::string yysyntax_error_ (state_type yystate,
                                         const symbol_type& yyla) const;

    /// Compute post-reduction state.
    /// \param yystate   the current state
    /// \param yysym     the nonterminal to push on the stack
    static state_type yy_lr_goto_state_ (state_type yystate, int yysym);

    /// Whether the given \c yypact_ value indicates a defaulted state.
    /// \param yyvalue   the value to check
    static bool yy_pact_value_is_default_ (int yyvalue);

    /// Whether the given \c yytable_ value indicates a syntax error.
    /// \param yyvalue   the value to check
    static bool yy_table_value_is_error_ (int yyvalue);

    static const short yypact_ninf_;
    static const short yytable_ninf_;

    /// Convert a scanner token number \a t to a symbol number.
    /// In theory \a t should be a token_type, but character literals
    /// are valid, yet not members of the token_type enum.
    static token_number_type yytranslate_ (int t);

    // Tables.
    // YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
    // STATE-NUM.
    static const short yypact_[];

    // YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
    // Performed when YYTABLE does not specify something else to do.  Zero
    // means the default is an error.
    static const short yydefact_[];

    // YYPGOTO[NTERM-NUM].
    static const short yypgoto_[];

    // YYDEFGOTO[NTERM-NUM].
    static const short yydefgoto_[];

    // YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
    // positive, shift that token.  If negative, reduce the rule whose
    // number is the opposite.  If YYTABLE_NINF, syntax error.
    static const short yytable_[];

    static const short yycheck_[];

    // YYSTOS[STATE-NUM] -- The (internal number of the) accessing
    // symbol of state STATE-NUM.
    static const short yystos_[];

    // YYR1[YYN] -- Symbol number of symbol that rule YYN derives.
    static const short yyr1_[];

    // YYR2[YYN] -- Number of symbols on the right hand side of rule YYN.
    static const signed char yyr2_[];


    /// Convert the symbol name \a n to a form suitable for a diagnostic.
    static std::string yytnamerr_ (const char *n);


    /// For a symbol, its name in clear.
    static const char* const yytname_[];
#if YYDEBUG
    // YYRLINE[YYN] -- Source line where rule number YYN was defined.
    static const short yyrline_[];
    /// Report on the debug stream that the rule \a r is going to be reduced.
    virtual void yy_reduce_print_ (int r);
    /// Print the state stack on the debug stream.
    virtual void yystack_print_ ();

    /// Debugging level.
    int yydebug_;
    /// Debug stream.
    std::ostream* yycdebug_;

    /// \brief Display a symbol type, value and location.
    /// \param yyo    The output stream.
    /// \param yysym  The symbol.
    template <typename Base>
    void yy_print_ (std::ostream& yyo, const basic_symbol<Base>& yysym) const;
#endif

    /// \brief Reclaim the memory associated to a symbol.
    /// \param yymsg     Why this token is reclaimed.
    ///                  If null, print nothing.
    /// \param yysym     The symbol.
    template <typename Base>
    void yy_destroy_ (const char* yymsg, basic_symbol<Base>& yysym) const;

  private:
    /// Type access provider for state based symbols.
    struct by_state
    {
      /// Default constructor.
      by_state () YY_NOEXCEPT;

      /// The symbol type as needed by the constructor.
      typedef state_type kind_type;

      /// Constructor.
      by_state (kind_type s) YY_NOEXCEPT;

      /// Copy constructor.
      by_state (const by_state& that) YY_NOEXCEPT;

      /// Record that this symbol is empty.
      void clear () YY_NOEXCEPT;

      /// Steal the symbol type from \a that.
      void move (by_state& that);

      /// The (internal) type number (corresponding to \a state).
      /// \a empty_symbol when empty.
      symbol_number_type type_get () const YY_NOEXCEPT;

      /// The state number used to denote an empty symbol.
      /// We use the initial state, as it does not have a value.
      enum { empty_state = 0 };

      /// The state.
      /// \a empty when empty.
      state_type state;
    };

    /// "Internal" symbol: element of the stack.
    struct stack_symbol_type : basic_symbol<by_state>
    {
      /// Superclass.
      typedef basic_symbol<by_state> super_type;
      /// Construct an empty symbol.
      stack_symbol_type ();
      /// Move or copy construction.
      stack_symbol_type (YY_RVREF (stack_symbol_type) that);
      /// Steal the contents from \a sym to build this.
      stack_symbol_type (state_type s, YY_MOVE_REF (symbol_type) sym);
#if YY_CPLUSPLUS < 201103L
      /// Assignment, needed by push_back by some old implementations.
      /// Moves the contents of that.
      stack_symbol_type& operator= (stack_symbol_type& that);

      /// Assignment, needed by push_back by other implementations.
      /// Needed by some other old implementations.
      stack_symbol_type& operator= (const stack_symbol_type& that);
#endif
    };

    /// A stack with random access from its top.
    template <typename T, typename S = std::vector<T> >
    class stack
    {
    public:
      // Hide our reversed order.
      typedef typename S::reverse_iterator iterator;
      typedef typename S::const_reverse_iterator const_iterator;
      typedef typename S::size_type size_type;
      typedef typename std::ptrdiff_t index_type;

      stack (size_type n = 200)
        : seq_ (n)
      {}

      /// Random access.
      ///
      /// Index 0 returns the topmost element.
      const T&
      operator[] (index_type i) const
      {
        return seq_[size_type (size () - 1 - i)];
      }

      /// Random access.
      ///
      /// Index 0 returns the topmost element.
      T&
      operator[] (index_type i)
      {
        return seq_[size_type (size () - 1 - i)];
      }

      /// Steal the contents of \a t.
      ///
      /// Close to move-semantics.
      void
      push (YY_MOVE_REF (T) t)
      {
        seq_.push_back (T ());
        operator[] (0).move (t);
      }

      /// Pop elements from the stack.
      void
      pop (std::ptrdiff_t n = 1) YY_NOEXCEPT
      {
        for (; 0 < n; --n)
          seq_.pop_back ();
      }

      /// Pop all elements from the stack.
      void
      clear () YY_NOEXCEPT
      {
        seq_.clear ();
      }

      /// Number of elements on the stack.
      index_type
      size () const YY_NOEXCEPT
      {
        return index_type (seq_.size ());
      }

      std::ptrdiff_t
      ssize () const YY_NOEXCEPT
      {
        return std::ptrdiff_t (size ());
      }

      /// Iterator on top of the stack (going downwards).
      const_iterator
      begin () const YY_NOEXCEPT
      {
        return seq_.rbegin ();
      }

      /// Bottom of the stack.
      const_iterator
      end () const YY_NOEXCEPT
      {
        return seq_.rend ();
      }

      /// Present a slice of the top of a stack.
      class slice
      {
      public:
        slice (const stack& stack, index_type range)
          : stack_ (stack)
          , range_ (range)
        {}

        const T&
        operator[] (index_type i) const
        {
          return stack_[range_ - i];
        }

      private:
        const stack& stack_;
        index_type range_;
      };

    private:
      stack (const stack&);
      stack& operator= (const stack&);
      /// The wrapped container.
      S seq_;
    };


    /// Stack type.
    typedef stack<stack_symbol_type> stack_type;

    /// The stack.
    stack_type yystack_;

    /// Push a new state on the stack.
    /// \param m    a debug message to display
    ///             if null, no trace is output.
    /// \param sym  the symbol
    /// \warning the contents of \a s.value is stolen.
    void yypush_ (const char* m, YY_MOVE_REF (stack_symbol_type) sym);

    /// Push a new look ahead token on the state on the stack.
    /// \param m    a debug message to display
    ///             if null, no trace is output.
    /// \param s    the state
    /// \param sym  the symbol (for its value and location).
    /// \warning the contents of \a sym.value is stolen.
    void yypush_ (const char* m, state_type s, YY_MOVE_REF (symbol_type) sym);

    /// Pop \a n symbols from the stack.
    void yypop_ (int n = 1);

    /// Some specific tokens.
    static const token_number_type yy_error_token_ = 1;
    static const token_number_type yy_undef_token_ = 2;

    /// Constants.
    enum
    {
      yyeof_ = 0,
      yylast_ = 4744,     ///< Last index in yytable_.
      yynnts_ = 162,  ///< Number of nonterminal symbols.
      yyfinal_ = 80, ///< Termination state number.
      yyntokens_ = 122  ///< Number of tokens.
    };


    // User arguments.
    P4::P4ParserDriver& driver;
    P4::AbstractP4Lexer& lexer;
  };

  inline
  P4Parser::token_number_type
  P4Parser::yytranslate_ (int t)
  {
    // YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to
    // TOKEN-NUM as returned by yylex.
    static
    const token_number_type
    translate_table[] =
    {
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121
    };
    const int user_token_number_max_ = 376;

    if (t <= 0)
      return yyeof_;
    else if (t <= user_token_number_max_)
      return translate_table[t];
    else
      return yy_undef_token_;
  }

  // basic_symbol.
#if 201103L <= YY_CPLUSPLUS
  template <typename Base>
  P4Parser::basic_symbol<Base>::basic_symbol (basic_symbol&& that)
    : Base (std::move (that))
    , value ()
    , location (std::move (that.location))
  {
    switch (this->type_get ())
    {
      case 193: // typeRef
      case 194: // namedType
      case 197: // p4listType
      case 198: // tupleType
      case 199: // headerStackType
      case 200: // specializedType
      case 201: // baseType
      case 202: // typeOrVoid
      case 206: // typeArg
      case 208: // realTypeArg
        value.move< ConstType* > (std::move (that.value));
        break;

      case 135: // annotation
        value.move< IR::Annotation* > (std::move (that.value));
        break;

      case 133: // optAnnotations
        value.move< IR::Annotations* > (std::move (that.value));
        break;

      case 270: // argument
        value.move< IR::Argument* > (std::move (that.value));
        break;

      case 148: // objInitializer
      case 165: // parserBlockStatement
      case 185: // controlBody
      case 242: // blockStatement
        value.move< IR::BlockStatement* > (std::move (that.value));
        break;

      case 147: // instantiation
      case 151: // objDeclaration
      case 156: // parserLocalElement
      case 178: // valueSetDeclaration
      case 184: // controlLocalDeclaration
      case 250: // tableDeclaration
      case 260: // actionDeclaration
      case 261: // registerActionDeclaration
      case 262: // variableDeclaration
      case 263: // registerDeclaration
      case 264: // constantDeclaration
      case 267: // functionDeclaration
        value.move< IR::Declaration* > (std::move (that.value));
        break;

      case 143: // direction
        value.move< IR::Direction > (std::move (that.value));
        break;

      case 257: // entry
        value.move< IR::Entry* > (std::move (that.value));
        break;

      case 125: // p4rtControllerType
      case 167: // transitionStatement
      case 168: // stateExpression
      case 169: // selectExpression
      case 172: // keysetExpression
      case 176: // reducedSimpleKeysetExpression
      case 177: // simpleKeysetExpression
      case 248: // switchLabel
      case 256: // actionRef
      case 258: // entryPriority
      case 265: // optInitializer
      case 266: // initializer
      case 275: // lvalue
      case 276: // expression
      case 277: // nonBraceExpression
      case 278: // intOrStr
        value.move< IR::Expression* > (std::move (that.value));
        break;

      case 129: // nonTypeName
      case 130: // name
      case 131: // nonTableKwName
      case 273: // dot_name
        value.move< IR::ID* > (std::move (that.value));
        break;

      case 255: // actionList
        value.move< IR::IndexedVector<IR::ActionListElement>* > (std::move (that.value));
        break;

      case 155: // parserLocalElements
      case 183: // controlLocalDeclarations
        value.move< IR::IndexedVector<IR::Declaration>* > (std::move (that.value));
        break;

      case 230: // identifierList
        value.move< IR::IndexedVector<IR::Declaration_ID>* > (std::move (that.value));
        break;

      case 138: // kvList
        value.move< IR::IndexedVector<IR::NamedExpression>* > (std::move (that.value));
        break;

      case 140: // parameterList
      case 141: // nonEmptyParameterList
      case 152: // optConstructorParameters
        value.move< IR::IndexedVector<IR::Parameter>* > (std::move (that.value));
        break;

      case 160: // parserStates
        value.move< IR::IndexedVector<IR::ParserState>* > (std::move (that.value));
        break;

      case 251: // tablePropertyList
        value.move< IR::IndexedVector<IR::Property>* > (std::move (that.value));
        break;

      case 226: // specifiedIdentifierList
        value.move< IR::IndexedVector<IR::SerEnumMember>* > (std::move (that.value));
        break;

      case 150: // objDeclarations
      case 163: // parserStatements
      case 244: // statOrDeclList
        value.move< IR::IndexedVector<IR::StatOrDecl>* > (std::move (that.value));
        break;

      case 221: // structFieldList
        value.move< IR::IndexedVector<IR::StructField>* > (std::move (that.value));
        break;

      case 205: // typeParameterList
        value.move< IR::IndexedVector<IR::Type_Var>* > (std::move (that.value));
        break;

      case 254: // keyElement
        value.move< IR::KeyElement* > (std::move (that.value));
        break;

      case 190: // functionPrototype
      case 192: // methodPrototype
        value.move< IR::Method* > (std::move (that.value));
        break;

      case 139: // kvPair
        value.move< IR::NamedExpression* > (std::move (that.value));
        break;

      case 124: // fragment
      case 128: // declaration
      case 186: // externDeclaration
      case 229: // matchKindDeclaration
        value.move< IR::Node* > (std::move (that.value));
        break;

      case 142: // parameter
        value.move< IR::Parameter* > (std::move (that.value));
        break;

      case 161: // parserState
        value.move< IR::ParserState* > (std::move (that.value));
        break;

      case 195: // prefixedType
      case 272: // prefixedNonTypeName
        value.move< IR::Path* > (std::move (that.value));
        break;

      case 252: // tableProperty
        value.move< IR::Property* > (std::move (that.value));
        break;

      case 171: // selectCase
        value.move< IR::SelectCase* > (std::move (that.value));
        break;

      case 227: // specifiedIdentifier
        value.move< IR::SerEnumMember* > (std::move (that.value));
        break;

      case 164: // parserStatement
      case 249: // statementOrDeclaration
        value.move< IR::StatOrDecl* > (std::move (that.value));
        break;

      case 232: // assignmentOrMethodCallStatement
      case 233: // emptyStatement
      case 234: // exitStatement
      case 235: // returnStatement
      case 236: // conditionalStatement
      case 237: // whileStatement
      case 238: // forStatement
      case 239: // forInitializer
      case 240: // directApplication
      case 241: // statement
      case 245: // switchStatement
        value.move< IR::Statement* > (std::move (that.value));
        break;

      case 222: // structField
        value.move< IR::StructField* > (std::move (that.value));
        break;

      case 247: // switchCase
        value.move< IR::SwitchCase* > (std::move (that.value));
        break;

      case 203: // optTypeParameters
      case 204: // typeParameters
        value.move< IR::TypeParameters* > (std::move (that.value));
        break;

      case 180: // controlTypeDeclaration
        value.move< IR::Type_Control* > (std::move (that.value));
        break;

      case 144: // packageTypeDeclaration
      case 154: // parserDeclaration
      case 179: // controlDeclaration
      case 210: // typeDeclaration
      case 211: // derivedTypeDeclaration
      case 212: // headerTypeDeclaration
      case 215: // structTypeDeclaration
      case 218: // headerUnionDeclaration
      case 223: // enumDeclaration
      case 231: // typedefDeclaration
        value.move< IR::Type_Declaration* > (std::move (that.value));
        break;

      case 228: // errorDeclaration
        value.move< IR::Type_Error* > (std::move (that.value));
        break;

      case 196: // typeName
        value.move< IR::Type_Name* > (std::move (that.value));
        break;

      case 157: // parserTypeDeclaration
        value.move< IR::Type_Parser* > (std::move (that.value));
        break;

      case 134: // annotations
        value.move< IR::Vector<IR::Annotation>* > (std::move (that.value));
        break;

      case 136: // annotationBody
        value.move< IR::Vector<IR::AnnotationToken>* > (std::move (that.value));
        break;

      case 268: // argumentList
      case 269: // nonEmptyArgList
        value.move< IR::Vector<IR::Argument>* > (std::move (that.value));
        break;

      case 259: // entriesList
        value.move< IR::Vector<IR::Entry>* > (std::move (that.value));
        break;

      case 173: // tupleKeysetExpression
      case 175: // simpleExpressionList
      case 271: // expressionList
      case 279: // intList
      case 280: // intOrStrList
      case 281: // strList
        value.move< IR::Vector<IR::Expression>* > (std::move (that.value));
        break;

      case 253: // keyElementList
        value.move< IR::Vector<IR::KeyElement>* > (std::move (that.value));
        break;

      case 189: // methodPrototypes
        value.move< IR::Vector<IR::Method>* > (std::move (that.value));
        break;

      case 170: // selectCaseList
        value.move< IR::Vector<IR::SelectCase>* > (std::move (that.value));
        break;

      case 246: // switchCases
        value.move< IR::Vector<IR::SwitchCase>* > (std::move (that.value));
        break;

      case 207: // typeArgumentList
      case 209: // realTypeArgumentList
        value.move< IR::Vector<IR::Type>* > (std::move (that.value));
        break;

      case 132: // optCONST
        value.move< OptionalConst > (std::move (that.value));
        break;

      case 22: // UNEXPECTED_TOKEN
      case 23: // END_PRAGMA
      case 24: // "<="
      case 25: // ">="
      case 26: // "<<"
      case 27: // "&&"
      case 28: // "||"
      case 29: // "!="
      case 30: // "=="
      case 31: // "+"
      case 32: // "-"
      case 33: // "|+|"
      case 34: // "|-|"
      case 35: // "*"
      case 36: // "{#}"
      case 37: // "/"
      case 38: // "%"
      case 39: // "|"
      case 40: // "&"
      case 41: // "^"
      case 42: // "~"
      case 43: // "["
      case 44: // "]"
      case 45: // "{"
      case 46: // "}"
      case 47: // "<"
      case 48: // L_ANGLE_ARGS
      case 49: // ">"
      case 50: // R_ANGLE_SHIFT
      case 51: // "("
      case 52: // ")"
      case 53: // "!"
      case 54: // ":"
      case 55: // ","
      case 56: // "?"
      case 57: // "."
      case 58: // "="
      case 59: // ";"
      case 60: // "@"
      case 61: // "++"
      case 62: // "_"
      case 63: // "&&&"
      case 64: // "..."
      case 65: // ".."
      case 66: // TRUE
      case 67: // FALSE
      case 68: // THIS
      case 69: // ABSTRACT
      case 70: // ACTION
      case 71: // ACTIONS
      case 72: // APPLY
      case 73: // BOOL
      case 74: // BIT
      case 75: // CONST
      case 76: // CONTROL
      case 77: // DEFAULT
      case 78: // ELSE
      case 79: // ENTRIES
      case 80: // ENUM
      case 81: // ERROR
      case 82: // EXIT
      case 83: // EXTERN
      case 84: // FOR
      case 85: // HEADER
      case 86: // HEADER_UNION
      case 87: // IF
      case 88: // IN
      case 89: // INOUT
      case 90: // INT
      case 91: // KEY
      case 92: // LIST
      case 93: // SELECT
      case 94: // MATCH_KIND
      case 95: // TYPE
      case 96: // OUT
      case 97: // PACKAGE
      case 98: // PARSER
      case 99: // PRAGMA
      case 100: // PRIORITY
      case 101: // RETURN
      case 102: // REGISTER
      case 103: // REGACTION
      case 104: // STATE
      case 105: // STRING
      case 106: // STRUCT
      case 107: // SWITCH
      case 108: // TABLE
      case 109: // TRANSITION
      case 110: // TUPLE
      case 111: // TYPEDEF
      case 112: // VARBIT
      case 113: // VALUESET
      case 114: // VOID
      case 115: // WHILE
      case 137: // annotationToken
        value.move< Token > (std::move (that.value));
        break;

      case 119: // INTEGER
        value.move< UnparsedConstant > (std::move (that.value));
        break;

      case 116: // IDENTIFIER
      case 117: // TYPE_IDENTIFIER
      case 118: // STRING_LITERAL
        value.move< cstring > (std::move (that.value));
        break;

      default:
        break;
    }

  }
#endif

  template <typename Base>
  P4Parser::basic_symbol<Base>::basic_symbol (const basic_symbol& that)
    : Base (that)
    , value ()
    , location (that.location)
  {
    switch (this->type_get ())
    {
      case 193: // typeRef
      case 194: // namedType
      case 197: // p4listType
      case 198: // tupleType
      case 199: // headerStackType
      case 200: // specializedType
      case 201: // baseType
      case 202: // typeOrVoid
      case 206: // typeArg
      case 208: // realTypeArg
        value.copy< ConstType* > (YY_MOVE (that.value));
        break;

      case 135: // annotation
        value.copy< IR::Annotation* > (YY_MOVE (that.value));
        break;

      case 133: // optAnnotations
        value.copy< IR::Annotations* > (YY_MOVE (that.value));
        break;

      case 270: // argument
        value.copy< IR::Argument* > (YY_MOVE (that.value));
        break;

      case 148: // objInitializer
      case 165: // parserBlockStatement
      case 185: // controlBody
      case 242: // blockStatement
        value.copy< IR::BlockStatement* > (YY_MOVE (that.value));
        break;

      case 147: // instantiation
      case 151: // objDeclaration
      case 156: // parserLocalElement
      case 178: // valueSetDeclaration
      case 184: // controlLocalDeclaration
      case 250: // tableDeclaration
      case 260: // actionDeclaration
      case 261: // registerActionDeclaration
      case 262: // variableDeclaration
      case 263: // registerDeclaration
      case 264: // constantDeclaration
      case 267: // functionDeclaration
        value.copy< IR::Declaration* > (YY_MOVE (that.value));
        break;

      case 143: // direction
        value.copy< IR::Direction > (YY_MOVE (that.value));
        break;

      case 257: // entry
        value.copy< IR::Entry* > (YY_MOVE (that.value));
        break;

      case 125: // p4rtControllerType
      case 167: // transitionStatement
      case 168: // stateExpression
      case 169: // selectExpression
      case 172: // keysetExpression
      case 176: // reducedSimpleKeysetExpression
      case 177: // simpleKeysetExpression
      case 248: // switchLabel
      case 256: // actionRef
      case 258: // entryPriority
      case 265: // optInitializer
      case 266: // initializer
      case 275: // lvalue
      case 276: // expression
      case 277: // nonBraceExpression
      case 278: // intOrStr
        value.copy< IR::Expression* > (YY_MOVE (that.value));
        break;

      case 129: // nonTypeName
      case 130: // name
      case 131: // nonTableKwName
      case 273: // dot_name
        value.copy< IR::ID* > (YY_MOVE (that.value));
        break;

      case 255: // actionList
        value.copy< IR::IndexedVector<IR::ActionListElement>* > (YY_MOVE (that.value));
        break;

      case 155: // parserLocalElements
      case 183: // controlLocalDeclarations
        value.copy< IR::IndexedVector<IR::Declaration>* > (YY_MOVE (that.value));
        break;

      case 230: // identifierList
        value.copy< IR::IndexedVector<IR::Declaration_ID>* > (YY_MOVE (that.value));
        break;

      case 138: // kvList
        value.copy< IR::IndexedVector<IR::NamedExpression>* > (YY_MOVE (that.value));
        break;

      case 140: // parameterList
      case 141: // nonEmptyParameterList
      case 152: // optConstructorParameters
        value.copy< IR::IndexedVector<IR::Parameter>* > (YY_MOVE (that.value));
        break;

      case 160: // parserStates
        value.copy< IR::IndexedVector<IR::ParserState>* > (YY_MOVE (that.value));
        break;

      case 251: // tablePropertyList
        value.copy< IR::IndexedVector<IR::Property>* > (YY_MOVE (that.value));
        break;

      case 226: // specifiedIdentifierList
        value.copy< IR::IndexedVector<IR::SerEnumMember>* > (YY_MOVE (that.value));
        break;

      case 150: // objDeclarations
      case 163: // parserStatements
      case 244: // statOrDeclList
        value.copy< IR::IndexedVector<IR::StatOrDecl>* > (YY_MOVE (that.value));
        break;

      case 221: // structFieldList
        value.copy< IR::IndexedVector<IR::StructField>* > (YY_MOVE (that.value));
        break;

      case 205: // typeParameterList
        value.copy< IR::IndexedVector<IR::Type_Var>* > (YY_MOVE (that.value));
        break;

      case 254: // keyElement
        value.copy< IR::KeyElement* > (YY_MOVE (that.value));
        break;

      case 190: // functionPrototype
      case 192: // methodPrototype
        value.copy< IR::Method* > (YY_MOVE (that.value));
        break;

      case 139: // kvPair
        value.copy< IR::NamedExpression* > (YY_MOVE (that.value));
        break;

      case 124: // fragment
      case 128: // declaration
      case 186: // externDeclaration
      case 229: // matchKindDeclaration
        value.copy< IR::Node* > (YY_MOVE (that.value));
        break;

      case 142: // parameter
        value.copy< IR::Parameter* > (YY_MOVE (that.value));
        break;

      case 161: // parserState
        value.copy< IR::ParserState* > (YY_MOVE (that.value));
        break;

      case 195: // prefixedType
      case 272: // prefixedNonTypeName
        value.copy< IR::Path* > (YY_MOVE (that.value));
        break;

      case 252: // tableProperty
        value.copy< IR::Property* > (YY_MOVE (that.value));
        break;

      case 171: // selectCase
        value.copy< IR::SelectCase* > (YY_MOVE (that.value));
        break;

      case 227: // specifiedIdentifier
        value.copy< IR::SerEnumMember* > (YY_MOVE (that.value));
        break;

      case 164: // parserStatement
      case 249: // statementOrDeclaration
        value.copy< IR::StatOrDecl* > (YY_MOVE (that.value));
        break;

      case 232: // assignmentOrMethodCallStatement
      case 233: // emptyStatement
      case 234: // exitStatement
      case 235: // returnStatement
      case 236: // conditionalStatement
      case 237: // whileStatement
      case 238: // forStatement
      case 239: // forInitializer
      case 240: // directApplication
      case 241: // statement
      case 245: // switchStatement
        value.copy< IR::Statement* > (YY_MOVE (that.value));
        break;

      case 222: // structField
        value.copy< IR::StructField* > (YY_MOVE (that.value));
        break;

      case 247: // switchCase
        value.copy< IR::SwitchCase* > (YY_MOVE (that.value));
        break;

      case 203: // optTypeParameters
      case 204: // typeParameters
        value.copy< IR::TypeParameters* > (YY_MOVE (that.value));
        break;

      case 180: // controlTypeDeclaration
        value.copy< IR::Type_Control* > (YY_MOVE (that.value));
        break;

      case 144: // packageTypeDeclaration
      case 154: // parserDeclaration
      case 179: // controlDeclaration
      case 210: // typeDeclaration
      case 211: // derivedTypeDeclaration
      case 212: // headerTypeDeclaration
      case 215: // structTypeDeclaration
      case 218: // headerUnionDeclaration
      case 223: // enumDeclaration
      case 231: // typedefDeclaration
        value.copy< IR::Type_Declaration* > (YY_MOVE (that.value));
        break;

      case 228: // errorDeclaration
        value.copy< IR::Type_Error* > (YY_MOVE (that.value));
        break;

      case 196: // typeName
        value.copy< IR::Type_Name* > (YY_MOVE (that.value));
        break;

      case 157: // parserTypeDeclaration
        value.copy< IR::Type_Parser* > (YY_MOVE (that.value));
        break;

      case 134: // annotations
        value.copy< IR::Vector<IR::Annotation>* > (YY_MOVE (that.value));
        break;

      case 136: // annotationBody
        value.copy< IR::Vector<IR::AnnotationToken>* > (YY_MOVE (that.value));
        break;

      case 268: // argumentList
      case 269: // nonEmptyArgList
        value.copy< IR::Vector<IR::Argument>* > (YY_MOVE (that.value));
        break;

      case 259: // entriesList
        value.copy< IR::Vector<IR::Entry>* > (YY_MOVE (that.value));
        break;

      case 173: // tupleKeysetExpression
      case 175: // simpleExpressionList
      case 271: // expressionList
      case 279: // intList
      case 280: // intOrStrList
      case 281: // strList
        value.copy< IR::Vector<IR::Expression>* > (YY_MOVE (that.value));
        break;

      case 253: // keyElementList
        value.copy< IR::Vector<IR::KeyElement>* > (YY_MOVE (that.value));
        break;

      case 189: // methodPrototypes
        value.copy< IR::Vector<IR::Method>* > (YY_MOVE (that.value));
        break;

      case 170: // selectCaseList
        value.copy< IR::Vector<IR::SelectCase>* > (YY_MOVE (that.value));
        break;

      case 246: // switchCases
        value.copy< IR::Vector<IR::SwitchCase>* > (YY_MOVE (that.value));
        break;

      case 207: // typeArgumentList
      case 209: // realTypeArgumentList
        value.copy< IR::Vector<IR::Type>* > (YY_MOVE (that.value));
        break;

      case 132: // optCONST
        value.copy< OptionalConst > (YY_MOVE (that.value));
        break;

      case 22: // UNEXPECTED_TOKEN
      case 23: // END_PRAGMA
      case 24: // "<="
      case 25: // ">="
      case 26: // "<<"
      case 27: // "&&"
      case 28: // "||"
      case 29: // "!="
      case 30: // "=="
      case 31: // "+"
      case 32: // "-"
      case 33: // "|+|"
      case 34: // "|-|"
      case 35: // "*"
      case 36: // "{#}"
      case 37: // "/"
      case 38: // "%"
      case 39: // "|"
      case 40: // "&"
      case 41: // "^"
      case 42: // "~"
      case 43: // "["
      case 44: // "]"
      case 45: // "{"
      case 46: // "}"
      case 47: // "<"
      case 48: // L_ANGLE_ARGS
      case 49: // ">"
      case 50: // R_ANGLE_SHIFT
      case 51: // "("
      case 52: // ")"
      case 53: // "!"
      case 54: // ":"
      case 55: // ","
      case 56: // "?"
      case 57: // "."
      case 58: // "="
      case 59: // ";"
      case 60: // "@"
      case 61: // "++"
      case 62: // "_"
      case 63: // "&&&"
      case 64: // "..."
      case 65: // ".."
      case 66: // TRUE
      case 67: // FALSE
      case 68: // THIS
      case 69: // ABSTRACT
      case 70: // ACTION
      case 71: // ACTIONS
      case 72: // APPLY
      case 73: // BOOL
      case 74: // BIT
      case 75: // CONST
      case 76: // CONTROL
      case 77: // DEFAULT
      case 78: // ELSE
      case 79: // ENTRIES
      case 80: // ENUM
      case 81: // ERROR
      case 82: // EXIT
      case 83: // EXTERN
      case 84: // FOR
      case 85: // HEADER
      case 86: // HEADER_UNION
      case 87: // IF
      case 88: // IN
      case 89: // INOUT
      case 90: // INT
      case 91: // KEY
      case 92: // LIST
      case 93: // SELECT
      case 94: // MATCH_KIND
      case 95: // TYPE
      case 96: // OUT
      case 97: // PACKAGE
      case 98: // PARSER
      case 99: // PRAGMA
      case 100: // PRIORITY
      case 101: // RETURN
      case 102: // REGISTER
      case 103: // REGACTION
      case 104: // STATE
      case 105: // STRING
      case 106: // STRUCT
      case 107: // SWITCH
      case 108: // TABLE
      case 109: // TRANSITION
      case 110: // TUPLE
      case 111: // TYPEDEF
      case 112: // VARBIT
      case 113: // VALUESET
      case 114: // VOID
      case 115: // WHILE
      case 137: // annotationToken
        value.copy< Token > (YY_MOVE (that.value));
        break;

      case 119: // INTEGER
        value.copy< UnparsedConstant > (YY_MOVE (that.value));
        break;

      case 116: // IDENTIFIER
      case 117: // TYPE_IDENTIFIER
      case 118: // STRING_LITERAL
        value.copy< cstring > (YY_MOVE (that.value));
        break;

      default:
        break;
    }

  }



  template <typename Base>
  bool
  P4Parser::basic_symbol<Base>::empty () const YY_NOEXCEPT
  {
    return Base::type_get () == empty_symbol;
  }

  template <typename Base>
  void
  P4Parser::basic_symbol<Base>::move (basic_symbol& s)
  {
    super_type::move (s);
    switch (this->type_get ())
    {
      case 193: // typeRef
      case 194: // namedType
      case 197: // p4listType
      case 198: // tupleType
      case 199: // headerStackType
      case 200: // specializedType
      case 201: // baseType
      case 202: // typeOrVoid
      case 206: // typeArg
      case 208: // realTypeArg
        value.move< ConstType* > (YY_MOVE (s.value));
        break;

      case 135: // annotation
        value.move< IR::Annotation* > (YY_MOVE (s.value));
        break;

      case 133: // optAnnotations
        value.move< IR::Annotations* > (YY_MOVE (s.value));
        break;

      case 270: // argument
        value.move< IR::Argument* > (YY_MOVE (s.value));
        break;

      case 148: // objInitializer
      case 165: // parserBlockStatement
      case 185: // controlBody
      case 242: // blockStatement
        value.move< IR::BlockStatement* > (YY_MOVE (s.value));
        break;

      case 147: // instantiation
      case 151: // objDeclaration
      case 156: // parserLocalElement
      case 178: // valueSetDeclaration
      case 184: // controlLocalDeclaration
      case 250: // tableDeclaration
      case 260: // actionDeclaration
      case 261: // registerActionDeclaration
      case 262: // variableDeclaration
      case 263: // registerDeclaration
      case 264: // constantDeclaration
      case 267: // functionDeclaration
        value.move< IR::Declaration* > (YY_MOVE (s.value));
        break;

      case 143: // direction
        value.move< IR::Direction > (YY_MOVE (s.value));
        break;

      case 257: // entry
        value.move< IR::Entry* > (YY_MOVE (s.value));
        break;

      case 125: // p4rtControllerType
      case 167: // transitionStatement
      case 168: // stateExpression
      case 169: // selectExpression
      case 172: // keysetExpression
      case 176: // reducedSimpleKeysetExpression
      case 177: // simpleKeysetExpression
      case 248: // switchLabel
      case 256: // actionRef
      case 258: // entryPriority
      case 265: // optInitializer
      case 266: // initializer
      case 275: // lvalue
      case 276: // expression
      case 277: // nonBraceExpression
      case 278: // intOrStr
        value.move< IR::Expression* > (YY_MOVE (s.value));
        break;

      case 129: // nonTypeName
      case 130: // name
      case 131: // nonTableKwName
      case 273: // dot_name
        value.move< IR::ID* > (YY_MOVE (s.value));
        break;

      case 255: // actionList
        value.move< IR::IndexedVector<IR::ActionListElement>* > (YY_MOVE (s.value));
        break;

      case 155: // parserLocalElements
      case 183: // controlLocalDeclarations
        value.move< IR::IndexedVector<IR::Declaration>* > (YY_MOVE (s.value));
        break;

      case 230: // identifierList
        value.move< IR::IndexedVector<IR::Declaration_ID>* > (YY_MOVE (s.value));
        break;

      case 138: // kvList
        value.move< IR::IndexedVector<IR::NamedExpression>* > (YY_MOVE (s.value));
        break;

      case 140: // parameterList
      case 141: // nonEmptyParameterList
      case 152: // optConstructorParameters
        value.move< IR::IndexedVector<IR::Parameter>* > (YY_MOVE (s.value));
        break;

      case 160: // parserStates
        value.move< IR::IndexedVector<IR::ParserState>* > (YY_MOVE (s.value));
        break;

      case 251: // tablePropertyList
        value.move< IR::IndexedVector<IR::Property>* > (YY_MOVE (s.value));
        break;

      case 226: // specifiedIdentifierList
        value.move< IR::IndexedVector<IR::SerEnumMember>* > (YY_MOVE (s.value));
        break;

      case 150: // objDeclarations
      case 163: // parserStatements
      case 244: // statOrDeclList
        value.move< IR::IndexedVector<IR::StatOrDecl>* > (YY_MOVE (s.value));
        break;

      case 221: // structFieldList
        value.move< IR::IndexedVector<IR::StructField>* > (YY_MOVE (s.value));
        break;

      case 205: // typeParameterList
        value.move< IR::IndexedVector<IR::Type_Var>* > (YY_MOVE (s.value));
        break;

      case 254: // keyElement
        value.move< IR::KeyElement* > (YY_MOVE (s.value));
        break;

      case 190: // functionPrototype
      case 192: // methodPrototype
        value.move< IR::Method* > (YY_MOVE (s.value));
        break;

      case 139: // kvPair
        value.move< IR::NamedExpression* > (YY_MOVE (s.value));
        break;

      case 124: // fragment
      case 128: // declaration
      case 186: // externDeclaration
      case 229: // matchKindDeclaration
        value.move< IR::Node* > (YY_MOVE (s.value));
        break;

      case 142: // parameter
        value.move< IR::Parameter* > (YY_MOVE (s.value));
        break;

      case 161: // parserState
        value.move< IR::ParserState* > (YY_MOVE (s.value));
        break;

      case 195: // prefixedType
      case 272: // prefixedNonTypeName
        value.move< IR::Path* > (YY_MOVE (s.value));
        break;

      case 252: // tableProperty
        value.move< IR::Property* > (YY_MOVE (s.value));
        break;

      case 171: // selectCase
        value.move< IR::SelectCase* > (YY_MOVE (s.value));
        break;

      case 227: // specifiedIdentifier
        value.move< IR::SerEnumMember* > (YY_MOVE (s.value));
        break;

      case 164: // parserStatement
      case 249: // statementOrDeclaration
        value.move< IR::StatOrDecl* > (YY_MOVE (s.value));
        break;

      case 232: // assignmentOrMethodCallStatement
      case 233: // emptyStatement
      case 234: // exitStatement
      case 235: // returnStatement
      case 236: // conditionalStatement
      case 237: // whileStatement
      case 238: // forStatement
      case 239: // forInitializer
      case 240: // directApplication
      case 241: // statement
      case 245: // switchStatement
        value.move< IR::Statement* > (YY_MOVE (s.value));
        break;

      case 222: // structField
        value.move< IR::StructField* > (YY_MOVE (s.value));
        break;

      case 247: // switchCase
        value.move< IR::SwitchCase* > (YY_MOVE (s.value));
        break;

      case 203: // optTypeParameters
      case 204: // typeParameters
        value.move< IR::TypeParameters* > (YY_MOVE (s.value));
        break;

      case 180: // controlTypeDeclaration
        value.move< IR::Type_Control* > (YY_MOVE (s.value));
        break;

      case 144: // packageTypeDeclaration
      case 154: // parserDeclaration
      case 179: // controlDeclaration
      case 210: // typeDeclaration
      case 211: // derivedTypeDeclaration
      case 212: // headerTypeDeclaration
      case 215: // structTypeDeclaration
      case 218: // headerUnionDeclaration
      case 223: // enumDeclaration
      case 231: // typedefDeclaration
        value.move< IR::Type_Declaration* > (YY_MOVE (s.value));
        break;

      case 228: // errorDeclaration
        value.move< IR::Type_Error* > (YY_MOVE (s.value));
        break;

      case 196: // typeName
        value.move< IR::Type_Name* > (YY_MOVE (s.value));
        break;

      case 157: // parserTypeDeclaration
        value.move< IR::Type_Parser* > (YY_MOVE (s.value));
        break;

      case 134: // annotations
        value.move< IR::Vector<IR::Annotation>* > (YY_MOVE (s.value));
        break;

      case 136: // annotationBody
        value.move< IR::Vector<IR::AnnotationToken>* > (YY_MOVE (s.value));
        break;

      case 268: // argumentList
      case 269: // nonEmptyArgList
        value.move< IR::Vector<IR::Argument>* > (YY_MOVE (s.value));
        break;

      case 259: // entriesList
        value.move< IR::Vector<IR::Entry>* > (YY_MOVE (s.value));
        break;

      case 173: // tupleKeysetExpression
      case 175: // simpleExpressionList
      case 271: // expressionList
      case 279: // intList
      case 280: // intOrStrList
      case 281: // strList
        value.move< IR::Vector<IR::Expression>* > (YY_MOVE (s.value));
        break;

      case 253: // keyElementList
        value.move< IR::Vector<IR::KeyElement>* > (YY_MOVE (s.value));
        break;

      case 189: // methodPrototypes
        value.move< IR::Vector<IR::Method>* > (YY_MOVE (s.value));
        break;

      case 170: // selectCaseList
        value.move< IR::Vector<IR::SelectCase>* > (YY_MOVE (s.value));
        break;

      case 246: // switchCases
        value.move< IR::Vector<IR::SwitchCase>* > (YY_MOVE (s.value));
        break;

      case 207: // typeArgumentList
      case 209: // realTypeArgumentList
        value.move< IR::Vector<IR::Type>* > (YY_MOVE (s.value));
        break;

      case 132: // optCONST
        value.move< OptionalConst > (YY_MOVE (s.value));
        break;

      case 22: // UNEXPECTED_TOKEN
      case 23: // END_PRAGMA
      case 24: // "<="
      case 25: // ">="
      case 26: // "<<"
      case 27: // "&&"
      case 28: // "||"
      case 29: // "!="
      case 30: // "=="
      case 31: // "+"
      case 32: // "-"
      case 33: // "|+|"
      case 34: // "|-|"
      case 35: // "*"
      case 36: // "{#}"
      case 37: // "/"
      case 38: // "%"
      case 39: // "|"
      case 40: // "&"
      case 41: // "^"
      case 42: // "~"
      case 43: // "["
      case 44: // "]"
      case 45: // "{"
      case 46: // "}"
      case 47: // "<"
      case 48: // L_ANGLE_ARGS
      case 49: // ">"
      case 50: // R_ANGLE_SHIFT
      case 51: // "("
      case 52: // ")"
      case 53: // "!"
      case 54: // ":"
      case 55: // ","
      case 56: // "?"
      case 57: // "."
      case 58: // "="
      case 59: // ";"
      case 60: // "@"
      case 61: // "++"
      case 62: // "_"
      case 63: // "&&&"
      case 64: // "..."
      case 65: // ".."
      case 66: // TRUE
      case 67: // FALSE
      case 68: // THIS
      case 69: // ABSTRACT
      case 70: // ACTION
      case 71: // ACTIONS
      case 72: // APPLY
      case 73: // BOOL
      case 74: // BIT
      case 75: // CONST
      case 76: // CONTROL
      case 77: // DEFAULT
      case 78: // ELSE
      case 79: // ENTRIES
      case 80: // ENUM
      case 81: // ERROR
      case 82: // EXIT
      case 83: // EXTERN
      case 84: // FOR
      case 85: // HEADER
      case 86: // HEADER_UNION
      case 87: // IF
      case 88: // IN
      case 89: // INOUT
      case 90: // INT
      case 91: // KEY
      case 92: // LIST
      case 93: // SELECT
      case 94: // MATCH_KIND
      case 95: // TYPE
      case 96: // OUT
      case 97: // PACKAGE
      case 98: // PARSER
      case 99: // PRAGMA
      case 100: // PRIORITY
      case 101: // RETURN
      case 102: // REGISTER
      case 103: // REGACTION
      case 104: // STATE
      case 105: // STRING
      case 106: // STRUCT
      case 107: // SWITCH
      case 108: // TABLE
      case 109: // TRANSITION
      case 110: // TUPLE
      case 111: // TYPEDEF
      case 112: // VARBIT
      case 113: // VALUESET
      case 114: // VOID
      case 115: // WHILE
      case 137: // annotationToken
        value.move< Token > (YY_MOVE (s.value));
        break;

      case 119: // INTEGER
        value.move< UnparsedConstant > (YY_MOVE (s.value));
        break;

      case 116: // IDENTIFIER
      case 117: // TYPE_IDENTIFIER
      case 118: // STRING_LITERAL
        value.move< cstring > (YY_MOVE (s.value));
        break;

      default:
        break;
    }

    location = YY_MOVE (s.location);
  }

  // by_type.
  inline
  P4Parser::by_type::by_type ()
    : type (empty_symbol)
  {}

#if 201103L <= YY_CPLUSPLUS
  inline
  P4Parser::by_type::by_type (by_type&& that)
    : type (that.type)
  {
    that.clear ();
  }
#endif

  inline
  P4Parser::by_type::by_type (const by_type& that)
    : type (that.type)
  {}

  inline
  P4Parser::by_type::by_type (token_type t)
    : type (yytranslate_ (t))
  {}

  inline
  void
  P4Parser::by_type::clear ()
  {
    type = empty_symbol;
  }

  inline
  void
  P4Parser::by_type::move (by_type& that)
  {
    type = that.type;
    that.clear ();
  }

  inline
  int
  P4Parser::by_type::type_get () const YY_NOEXCEPT
  {
    return type;
  }

#line 23 "p4parser.ypp"
} // P4
#line 5772 "p4parser.tab.hpp"





#endif // !YY_YY_P4PARSER_TAB_HPP_INCLUDED
